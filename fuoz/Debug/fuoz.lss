
fuoz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000031f4  00003288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  000032a4  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000032a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00003d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ea  00000000  00000000  00003f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002cef  00000000  00000000  000042ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001248  00000000  00000000  00006fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021e5  00000000  00000000  00008226  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000390  00000000  00000000  0000a40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005af  00000000  00000000  0000a79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a79  00000000  00000000  0000ad4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000609  00000000  00000000  0000b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__ctors_end>
       4:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_1>
       8:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
       c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      10:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      14:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      18:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      1c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      20:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      24:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      28:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      2c:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_11>
      30:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_12>
      34:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__vector_13>
      38:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      3c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      40:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      44:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      48:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      4c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      50:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      54:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__vector_21>
      58:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      5c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      60:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>
      64:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__bad_interrupt>

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <temps>:
      a8:	00 00 01 00 02 00 03 00 04 00 06 00 07 00 08 00     ................
      b8:	09 00 0a 00 0b 00 0c 00 0d 00 0e 00 0f 00 10 00     ................
      c8:	11 00 12 00 13 00 14 00 15 00 16 00 18 00 19 00     ................
      d8:	1a 00 1b 00 1c 00 1d 00 1e 00 1f 00 20 00 21 00     ............ .!.
      e8:	22 00 23 00 24 00 25 00 26 00 27 00 28 00 29 00     ".#.$.%.&.'.(.).
      f8:	2a 00 2b 00 2c 00 2d 00 2e 00 2f 00 30 00 31 00     *.+.,.-.../.0.1.
     108:	32 00 33 00 34 00 35 00 36 00 37 00 38 00 39 00     2.3.4.5.6.7.8.9.
     118:	3a 00 3b 00 3c 00 3d 00 3e 00 3f 00 40 00 41 00     :.;.<.=.>.?.@.A.
     128:	42 00 43 00 44 00 44 00 45 00 46 00 47 00 48 00     B.C.D.D.E.F.G.H.
     138:	49 00 4a 00 4b 00 4c 00 4d 00 4e 00 4f 00 50 00     I.J.K.L.M.N.O.P.
     148:	51 00 52 00 53 00 54 00 55 00 56 00 57 00 58 00     Q.R.S.T.U.V.W.X.
     158:	58 00 59 00 5a 00 5b 00 5c 00 5d 00 5e 00 5f 00     X.Y.Z.[.\.].^._.
     168:	60 00 61 00 62 00 63 00 64 00 65 00 66 00 66 00     `.a.b.c.d.e.f.f.
     178:	67 00 68 00 69 00 6a 00 6b 00 6c 00 6d 00 6e 00     g.h.i.j.k.l.m.n.
     188:	6f 00 70 00 71 00 72 00 72 00 73 00 74 00 75 00     o.p.q.r.r.s.t.u.
     198:	76 00 77 00 78 00 79 00 7a 00 7b 00 7c 00 7c 00     v.w.x.y.z.{.|.|.
     1a8:	7d 00 7e 00 7f 00 80 00 81 00 82 00 83 00 84 00     }.~.............
     1b8:	85 00 86 00 86 00 87 00 88 00 89 00 8a 00 8b 00     ................
     1c8:	8c 00 8d 00 8e 00 8f 00 8f 00 90 00 91 00 92 00     ................
     1d8:	93 00 94 00 95 00 96 00 97 00 97 00 98 00 99 00     ................
     1e8:	9a 00 9b 00 9c 00 9d 00 9e 00 9f 00 9f 00 a0 00     ................
     1f8:	a1 00 a2 00 a3 00 a4 00 a5 00 a6 00 a7 00 a7 00     ................
     208:	a8 00 a9 00 aa 00 ab 00 ac 00 ad 00 ae 00 af 00     ................
     218:	af 00 b0 00 b1 00 b2 00 b3 00 b4 00 b5 00 b6 00     ................
     228:	b6 00 b7 00 b8 00 b9 00 ba 00 bb 00 bc 00 bd 00     ................
     238:	be 00 be 00 bf 00 c0 00 c1 00 c2 00 c3 00 c4 00     ................
     248:	c5 00 c5 00 c6 00 c7 00 c8 00 c9 00 ca 00 cb 00     ................
     258:	cc 00 cd 00 cd 00 ce 00 cf 00 d0 00 d1 00 d2 00     ................
     268:	d3 00 d4 00 d4 00 d5 00 d6 00 d7 00 d8 00 d9 00     ................
     278:	da 00 db 00 dc 00 dc 00 dd 00 de 00 df 00 e0 00     ................
     288:	e1 00 e2 00 e3 00 e4 00 e4 00 e5 00 e6 00 e7 00     ................
     298:	e8 00 e9 00 ea 00 eb 00 eb 00 ec 00 ed 00 ee 00     ................
     2a8:	ef 00 f0 00 f1 00 f2 00 f3 00 f3 00 f4 00 f5 00     ................
     2b8:	f6 00 f7 00 f8 00 f9 00 fa 00 fb 00 fc 00 fc 00     ................
     2c8:	fd 00 fe 00 ff 00 00 01 01 01 02 01 03 01 04 01     ................
     2d8:	04 01 05 01 06 01 07 01 08 01 09 01 0a 01 0b 01     ................
     2e8:	0c 01 0d 01 0d 01 0e 01 0f 01 10 01 11 01 12 01     ................
     2f8:	13 01 14 01 15 01 16 01 17 01 17 01 18 01 19 01     ................
     308:	1a 01 1b 01 1c 01 1d 01 1e 01 1f 01 20 01 21 01     ............ .!.
     318:	21 01 22 01 23 01 24 01 25 01 26 01 27 01 28 01     !.".#.$.%.&.'.(.
     328:	29 01 2a 01 2b 01 2c 01 2d 01 2d 01 2e 01 2f 01     ).*.+.,.-.-.../.
     338:	30 01 31 01 32 01 33 01 34 01 35 01 36 01 37 01     0.1.2.3.4.5.6.7.
     348:	38 01 39 01 3a 01 3b 01 3b 01 3c 01 3d 01 3e 01     8.9.:.;.;.<.=.>.
     358:	3f 01 40 01 41 01 42 01 43 01 44 01 45 01 46 01     ?.@.A.B.C.D.E.F.
     368:	47 01 48 01 49 01 4a 01 4b 01 4c 01 4d 01 4e 01     G.H.I.J.K.L.M.N.
     378:	4f 01 4f 01 50 01 51 01 52 01 53 01 54 01 55 01     O.O.P.Q.R.S.T.U.
     388:	56 01 57 01 58 01 59 01 5a 01 5b 01 5c 01 5d 01     V.W.X.Y.Z.[.\.].
     398:	5e 01 5f 01 60 01 61 01 62 01 63 01 64 01 65 01     ^._.`.a.b.c.d.e.
     3a8:	66 01 67 01 68 01 69 01 6a 01 6b 01 6c 01 6d 01     f.g.h.i.j.k.l.m.
     3b8:	6e 01 6f 01 70 01 71 01 72 01 73 01 74 01 75 01     n.o.p.q.r.s.t.u.
     3c8:	76 01 77 01 78 01 79 01 7a 01 7b 01 7c 01 7d 01     v.w.x.y.z.{.|.}.
     3d8:	7e 01 7f 01 80 01 81 01 82 01 83 01 84 01 85 01     ~...............
     3e8:	86 01 88 01 89 01 8a 01 8b 01 8c 01 8d 01 8e 01     ................
     3f8:	8f 01 90 01 91 01 92 01 93 01 94 01 95 01 96 01     ................
     408:	97 01 98 01 9a 01 9b 01 9c 01 9d 01 9e 01 9f 01     ................
     418:	a0 01 a1 01 a2 01 a3 01 a4 01 a6 01 a7 01 a8 01     ................
     428:	a9 01 aa 01 ab 01 ac 01 ad 01 ae 01 b0 01 b1 01     ................
     438:	b2 01 b3 01 b4 01 b5 01 b6 01 b7 01 b9 01 ba 01     ................
     448:	bb 01 bc 01 bd 01 be 01 c0 01 c1 01 c2 01 c3 01     ................
     458:	c4 01 c5 01 c7 01 c8 01 c9 01 ca 01 cb 01 cc 01     ................
     468:	ce 01 cf 01 d0 01 d1 01 d2 01 d4 01 d5 01 d6 01     ................
     478:	d7 01 d8 01 da 01 db 01 dc 01 dd 01 df 01 e0 01     ................
     488:	e1 01 e2 01 e4 01 e5 01 e6 01 e7 01 e9 01 ea 01     ................
     498:	eb 01 ec 01 ee 01 ef 01 f0 01 f2 01 f3 01 f4 01     ................
     4a8:	f5 01 f7 01 f8 01 f9 01 fb 01 fc 01 fd 01 ff 01     ................
     4b8:	00 02 01 02 03 02 04 02 05 02 07 02 08 02 09 02     ................
     4c8:	0b 02 0c 02 0d 02 0f 02 10 02 12 02 13 02 14 02     ................
     4d8:	16 02 17 02 19 02 1a 02 1b 02 1d 02 1e 02 20 02     .............. .
     4e8:	21 02 23 02 24 02 26 02 27 02 28 02 2a 02 2b 02     !.#.$.&.'.(.*.+.
     4f8:	2d 02 2e 02 30 02 31 02 33 02 34 02 36 02 37 02     -...0.1.3.4.6.7.
     508:	39 02 3a 02 3c 02 3e 02 3f 02 41 02 42 02 44 02     9.:.<.>.?.A.B.D.
     518:	45 02 47 02 49 02 4a 02 4c 02 4d 02 4f 02 51 02     E.G.I.J.L.M.O.Q.
     528:	52 02 54 02 56 02 57 02 59 02 5b 02 5c 02 5e 02     R.T.V.W.Y.[.\.^.
     538:	60 02 61 02 63 02 65 02 66 02 68 02 6a 02 6c 02     `.a.c.e.f.h.j.l.
     548:	6d 02 6f 02 71 02 73 02 74 02 76 02 78 02 7a 02     m.o.q.s.t.v.x.z.
     558:	7c 02 7e 02 7f 02 81 02 83 02 85 02 87 02 89 02     |.~.............
     568:	8b 02 8d 02 8e 02 90 02 92 02 94 02 96 02 98 02     ................
     578:	9a 02 9c 02 9e 02 a0 02 a2 02 a4 02 a6 02 a8 02     ................
     588:	ab 02 ad 02 af 02 b1 02 b3 02 b5 02 b7 02 b9 02     ................
     598:	bc 02 be 02 c0 02 c2 02 c4 02 c7 02 c9 02 cb 02     ................
     5a8:	ce 02 d0 02 d2 02 d5 02 d7 02 d9 02 dc 02 de 02     ................
     5b8:	e1 02 e3 02 e5 02 e8 02 ea 02 ed 02 f0 02 f2 02     ................
     5c8:	f5 02 f7 02 fa 02 fc 02 ff 02 02 03 05 03 07 03     ................
     5d8:	0a 03 0d 03 10 03 12 03 15 03 18 03 1b 03 1e 03     ................
     5e8:	21 03 24 03 27 03 2a 03 2d 03 30 03 33 03 36 03     !.$.'.*.-.0.3.6.
     5f8:	39 03 3d 03 40 03 43 03 46 03 4a 03 4d 03 50 03     9.=.@.C.F.J.M.P.
     608:	54 03 57 03 5b 03 5e 03 62 03 65 03 69 03 6d 03     T.W.[.^.b.e.i.m.
     618:	71 03 74 03 78 03 7c 03 80 03 84 03 88 03 8c 03     q.t.x.|.........
     628:	90 03 94 03 98 03 9d 03 a1 03 a5 03 aa 03 ae 03     ................
     638:	b3 03 b8 03 bc 03 c1 03 c6 03 cb 03 d0 03 d5 03     ................
     648:	da 03 df 03 e5 03 ea 03 ef 03 f5 03 fb 03 00 04     ................
     658:	06 04 0c 04 12 04 19 04 1f 04 25 04 2c 04 33 04     ..........%.,.3.
     668:	3a 04 40 04 48 04 4f 04 56 04 5e 04 66 04 6e 04     :.@.H.O.V.^.f.n.
     678:	76 04 7e 04 87 04 90 04 99 04 a2 04 ac 04 b6 04     v.~.............
     688:	c0 04 ca 04 d5 04 e0 04 ec 04 f8 04 04 05 11 05     ................
     698:	1e 05 2c 05 3a 05 49 05 59 05 69 05 7a 05 8c 05     ..,.:.I.Y.i.z...
     6a8:	9f 05 b3 05 c8 05 de 05                             ........

000006b0 <__ctors_end>:
     6b0:	11 24       	eor	r1, r1
     6b2:	1f be       	out	0x3f, r1	; 63
     6b4:	cf ef       	ldi	r28, 0xFF	; 255
     6b6:	d8 e0       	ldi	r29, 0x08	; 8
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	cd bf       	out	0x3d, r28	; 61

000006bc <__do_copy_data>:
     6bc:	11 e0       	ldi	r17, 0x01	; 1
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b1 e0       	ldi	r27, 0x01	; 1
     6c2:	e4 ef       	ldi	r30, 0xF4	; 244
     6c4:	f1 e3       	ldi	r31, 0x31	; 49
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <__do_copy_data+0x10>
     6c8:	05 90       	lpm	r0, Z+
     6ca:	0d 92       	st	X+, r0
     6cc:	ac 31       	cpi	r26, 0x1C	; 28
     6ce:	b1 07       	cpc	r27, r17
     6d0:	d9 f7       	brne	.-10     	; 0x6c8 <__do_copy_data+0xc>

000006d2 <__do_clear_bss>:
     6d2:	11 e0       	ldi	r17, 0x01	; 1
     6d4:	ac e1       	ldi	r26, 0x1C	; 28
     6d6:	b1 e0       	ldi	r27, 0x01	; 1
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <.do_clear_bss_start>

000006da <.do_clear_bss_loop>:
     6da:	1d 92       	st	X+, r1

000006dc <.do_clear_bss_start>:
     6dc:	a2 32       	cpi	r26, 0x22	; 34
     6de:	b1 07       	cpc	r27, r17
     6e0:	e1 f7       	brne	.-8      	; 0x6da <.do_clear_bss_loop>
     6e2:	0e 94 48 06 	call	0xc90	; 0xc90 <main>
     6e6:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <_exit>

000006ea <__bad_interrupt>:
     6ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006ee <fuoz_init>:
unsigned int vrema = 0;
unsigned int tmp = 0;
unsigned int zar = 0;

void fuoz_init(void)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
		#endif
		PIN_DDR;
		sei();
	#endif
	//=======================
}
     6f6:	cf 91       	pop	r28
     6f8:	df 91       	pop	r29
     6fa:	08 95       	ret

000006fc <__vector_1>:
ISR(INT0_vect)
#elif Interrupt_MODE == 2 || Interrupt_MODE == 3
ISR(INT1_vect)
#endif

{
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	2f 93       	push	r18
     708:	3f 93       	push	r19
     70a:	4f 93       	push	r20
     70c:	5f 93       	push	r21
     70e:	6f 93       	push	r22
     710:	7f 93       	push	r23
     712:	8f 93       	push	r24
     714:	9f 93       	push	r25
     716:	af 93       	push	r26
     718:	bf 93       	push	r27
     71a:	ef 93       	push	r30
     71c:	ff 93       	push	r31
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
	cli();
     726:	f8 94       	cli
	LED_ON;
     728:	85 e2       	ldi	r24, 0x25	; 37
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	25 e2       	ldi	r18, 0x25	; 37
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	f9 01       	movw	r30, r18
     732:	20 81       	ld	r18, Z
     734:	21 60       	ori	r18, 0x01	; 1
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
	TCCR1B |= 1<<CS10|1<<CS11;//preddelitelj na 64 zapuskaem tajmer esli dat4ik dal signal
     73a:	81 e8       	ldi	r24, 0x81	; 129
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	21 e8       	ldi	r18, 0x81	; 129
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	f9 01       	movw	r30, r18
     744:	20 81       	ld	r18, Z
     746:	23 60       	ori	r18, 0x03	; 3
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
	vrema = TCNT1;
     74c:	84 e8       	ldi	r24, 0x84	; 132
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	fc 01       	movw	r30, r24
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	90 93 1d 01 	sts	0x011D, r25
     75a:	80 93 1c 01 	sts	0x011C, r24
				
	TCNT1 = 0;
     75e:	84 e8       	ldi	r24, 0x84	; 132
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	fc 01       	movw	r30, r24
     764:	11 82       	std	Z+1, r1	; 0x01
     766:	10 82       	st	Z, r1
	tmp = (vrema /12);
     768:	80 91 1c 01 	lds	r24, 0x011C
     76c:	90 91 1d 01 	lds	r25, 0x011D
     770:	2c e0       	ldi	r18, 0x0C	; 12
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	b9 01       	movw	r22, r18
     776:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__udivmodhi4>
     77a:	9b 01       	movw	r18, r22
     77c:	c9 01       	movw	r24, r18
     77e:	90 93 1f 01 	sts	0x011F, r25
     782:	80 93 1e 01 	sts	0x011E, r24

	if (tmp > Gorenie) // tmp verhnjaja mertvaja to4ka
     786:	80 91 02 01 	lds	r24, 0x0102
     78a:	90 91 03 01 	lds	r25, 0x0103
     78e:	9c 01       	movw	r18, r24
     790:	80 91 1e 01 	lds	r24, 0x011E
     794:	90 91 1f 01 	lds	r25, 0x011F
     798:	28 17       	cp	r18, r24
     79a:	39 07       	cpc	r19, r25
     79c:	88 f4       	brcc	.+34     	; 0x7c0 <__vector_1+0xc4>
	{
		tmp = tmp - Gorenie;
     79e:	20 91 1e 01 	lds	r18, 0x011E
     7a2:	30 91 1f 01 	lds	r19, 0x011F
     7a6:	80 91 02 01 	lds	r24, 0x0102
     7aa:	90 91 03 01 	lds	r25, 0x0103
     7ae:	a9 01       	movw	r20, r18
     7b0:	48 1b       	sub	r20, r24
     7b2:	59 0b       	sbc	r21, r25
     7b4:	ca 01       	movw	r24, r20
     7b6:	90 93 1f 01 	sts	0x011F, r25
     7ba:	80 93 1e 01 	sts	0x011E, r24
     7be:	06 c0       	rjmp	.+12     	; 0x7cc <__vector_1+0xd0>
	}else{
		tmp = 1;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	90 93 1f 01 	sts	0x011F, r25
     7c8:	80 93 1e 01 	sts	0x011E, r24
	}
	if (tmp > Nakoplenie)// esli zaderzhka iskri bolee 3ms
     7cc:	80 91 00 01 	lds	r24, 0x0100
     7d0:	90 91 01 01 	lds	r25, 0x0101
     7d4:	9c 01       	movw	r18, r24
     7d6:	80 91 1e 01 	lds	r24, 0x011E
     7da:	90 91 1f 01 	lds	r25, 0x011F
     7de:	28 17       	cp	r18, r24
     7e0:	39 07       	cpc	r19, r25
     7e2:	88 f4       	brcc	.+34     	; 0x806 <__vector_1+0x10a>
	{
		zar = tmp - Nakoplenie;//zaderzhka vklju4enija zarjadki katuwki zazhiganija 
     7e4:	20 91 1e 01 	lds	r18, 0x011E
     7e8:	30 91 1f 01 	lds	r19, 0x011F
     7ec:	80 91 00 01 	lds	r24, 0x0100
     7f0:	90 91 01 01 	lds	r25, 0x0101
     7f4:	f9 01       	movw	r30, r18
     7f6:	e8 1b       	sub	r30, r24
     7f8:	f9 0b       	sbc	r31, r25
     7fa:	cf 01       	movw	r24, r30
     7fc:	90 93 21 01 	sts	0x0121, r25
     800:	80 93 20 01 	sts	0x0120, r24
     804:	16 c0       	rjmp	.+44     	; 0x832 <__vector_1+0x136>
	} 
	else
	{
		zar = vrema + tmp - Nakoplenie;// (obwee vremja za oborot + vremja do iskri "kotoraja budet posle preivanija INTx" -
     806:	20 91 1c 01 	lds	r18, 0x011C
     80a:	30 91 1d 01 	lds	r19, 0x011D
     80e:	80 91 1e 01 	lds	r24, 0x011E
     812:	90 91 1f 01 	lds	r25, 0x011F
     816:	28 0f       	add	r18, r24
     818:	39 1f       	adc	r19, r25
     81a:	80 91 00 01 	lds	r24, 0x0100
     81e:	90 91 01 01 	lds	r25, 0x0101
     822:	a9 01       	movw	r20, r18
     824:	48 1b       	sub	r20, r24
     826:	59 0b       	sbc	r21, r25
     828:	ca 01       	movw	r24, r20
     82a:	90 93 21 01 	sts	0x0121, r25
     82e:	80 93 20 01 	sts	0x0120, r24
									   // - vremja nakoplenija energii) vremja zarjadki 3ms
	}
	OCR1A = tmp;
     832:	88 e8       	ldi	r24, 0x88	; 136
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	20 91 1e 01 	lds	r18, 0x011E
     83a:	30 91 1f 01 	lds	r19, 0x011F
     83e:	fc 01       	movw	r30, r24
     840:	31 83       	std	Z+1, r19	; 0x01
     842:	20 83       	st	Z, r18
	sei();
     844:	78 94       	sei
	
	
};
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	8f 93       	push	r24
     87c:	9f 93       	push	r25
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
	PIN_L;	// ISKRA!
     88a:	85 e2       	ldi	r24, 0x25	; 37
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	25 e2       	ldi	r18, 0x25	; 37
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	f9 01       	movw	r30, r18
     894:	20 81       	ld	r18, Z
     896:	2f 7d       	andi	r18, 0xDF	; 223
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
	LED_ON;
     89c:	85 e2       	ldi	r24, 0x25	; 37
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	25 e2       	ldi	r18, 0x25	; 37
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	f9 01       	movw	r30, r18
     8a6:	20 81       	ld	r18, Z
     8a8:	21 60       	ori	r18, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
	
	if(vrema <= Nakoplenie)// eto na slu4aj esli oboroti tam budut sliwkom boljwie ili dva cilindra no v etom slu4ae iskra budet v oboih cilindah odnovremenno
     8ae:	80 91 00 01 	lds	r24, 0x0100
     8b2:	90 91 01 01 	lds	r25, 0x0101
     8b6:	9c 01       	movw	r18, r24
     8b8:	80 91 1c 01 	lds	r24, 0x011C
     8bc:	90 91 1d 01 	lds	r25, 0x011D
     8c0:	28 17       	cp	r18, r24
     8c2:	39 07       	cpc	r19, r25
     8c4:	30 f0       	brcs	.+12     	; 0x8d2 <__vector_11+0x66>
	{
		zar = 2; //srazu vgonjaem katuwku v nakoplenie posle iskroobrazovanija
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	90 93 21 01 	sts	0x0121, r25
     8ce:	80 93 20 01 	sts	0x0120, r24
	}
	OCR1B = zar;
     8d2:	8a e8       	ldi	r24, 0x8A	; 138
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	20 91 20 01 	lds	r18, 0x0120
     8da:	30 91 21 01 	lds	r19, 0x0121
     8de:	fc 01       	movw	r30, r24
     8e0:	31 83       	std	Z+1, r19	; 0x01
     8e2:	20 83       	st	Z, r18
	
};
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	ff 91       	pop	r31
     8ea:	ef 91       	pop	r30
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	2f 93       	push	r18
     90a:	3f 93       	push	r19
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	ef 93       	push	r30
     912:	ff 93       	push	r31
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
	LED_ON;
     91c:	85 e2       	ldi	r24, 0x25	; 37
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	25 e2       	ldi	r18, 0x25	; 37
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	21 60       	ori	r18, 0x01	; 1
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
	PIN_H; // nakoplenie energii v katuwke
     92e:	85 e2       	ldi	r24, 0x25	; 37
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	25 e2       	ldi	r18, 0x25	; 37
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	20 62       	ori	r18, 0x20	; 32
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
};
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	ff 91       	pop	r31
     946:	ef 91       	pop	r30
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	3f 91       	pop	r19
     94e:	2f 91       	pop	r18
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <__vector_13>:

ISR(TIMER1_OVF_vect) // ostanovka dvigatelja
{
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	2f 93       	push	r18
     966:	3f 93       	push	r19
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
	LED_ON;
     978:	85 e2       	ldi	r24, 0x25	; 37
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	25 e2       	ldi	r18, 0x25	; 37
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	f9 01       	movw	r30, r18
     982:	20 81       	ld	r18, Z
     984:	21 60       	ori	r18, 0x01	; 1
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
	PIN_L;
     98a:	85 e2       	ldi	r24, 0x25	; 37
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	25 e2       	ldi	r18, 0x25	; 37
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	f9 01       	movw	r30, r18
     994:	20 81       	ld	r18, Z
     996:	2f 7d       	andi	r18, 0xDF	; 223
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
	TCCR1B = 0x00;//esli dvigatelj zagluwen neza4em tratit energiju akuma na razogrev katuwki zazhiganija 
     99c:	81 e8       	ldi	r24, 0x81	; 129
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fc 01       	movw	r30, r24
     9a2:	10 82       	st	Z, r1
};				  //maximaljnoe vremja nahozhdenija katuwki pod tokom primerno 0,5 sekundi
     9a4:	cf 91       	pop	r28
     9a6:	df 91       	pop	r29
     9a8:	ff 91       	pop	r31
     9aa:	ef 91       	pop	r30
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <lcd_putstring>:
#include <stdio.h>
#include <string.h>



void lcd_putstring(char * str) {
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <lcd_putstring+0x6>
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
  while (*str) {
     9cc:	0c c0       	rjmp	.+24     	; 0x9e6 <lcd_putstring+0x28>
    LCDsendChar(*str++);
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 81       	ld	r18, Z
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	9a 83       	std	Y+2, r25	; 0x02
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	82 2f       	mov	r24, r18
     9e2:	0e 94 f1 06 	call	0xde2	; 0xde2 <LCDsendChar>
#include <string.h>



void lcd_putstring(char * str) {
  while (*str) {
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	88 23       	and	r24, r24
     9f0:	71 f7       	brne	.-36     	; 0x9ce <lcd_putstring+0x10>
    LCDsendChar(*str++);
  }
}
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	cf 91       	pop	r28
     9f8:	df 91       	pop	r29
     9fa:	08 95       	ret

000009fc <Adc_Stat_LCD>:

void Adc_Stat_LCD(void)
{
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	e1 97       	sbiw	r28, 0x31	; 49
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
	char st[3];
	unsigned int tm;
	char line[16] = {'T', 'e', 'm', 'p', ':', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
     a14:	ce 01       	movw	r24, r28
     a16:	82 96       	adiw	r24, 0x22	; 34
     a18:	24 e0       	ldi	r18, 0x04	; 4
     a1a:	31 e0       	ldi	r19, 0x01	; 1
     a1c:	40 e1       	ldi	r20, 0x10	; 16
     a1e:	f9 01       	movw	r30, r18
     a20:	00 80       	ld	r0, Z
     a22:	2f 5f       	subi	r18, 0xFF	; 255
     a24:	3f 4f       	sbci	r19, 0xFF	; 255
     a26:	fc 01       	movw	r30, r24
     a28:	00 82       	st	Z, r0
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	41 50       	subi	r20, 0x01	; 1
     a2e:	44 23       	and	r20, r20
     a30:	b1 f7       	brne	.-20     	; 0xa1e <Adc_Stat_LCD+0x22>
	tm = Term() / 10;
     a32:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <Term>
     a36:	2a e0       	ldi	r18, 0x0A	; 10
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	b9 01       	movw	r22, r18
     a3c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__udivmodhi4>
     a40:	9b 01       	movw	r18, r22
     a42:	3a 83       	std	Y+2, r19	; 0x02
     a44:	29 83       	std	Y+1, r18	; 0x01
	itoa(tm, st, 10);
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	9a 81       	ldd	r25, Y+2	; 0x02
     a4a:	9e 01       	movw	r18, r28
     a4c:	21 5e       	subi	r18, 0xE1	; 225
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	b9 01       	movw	r22, r18
     a52:	4a e0       	ldi	r20, 0x0A	; 10
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	0e 94 c7 18 	call	0x318e	; 0x318e <itoa>
	//memcpy (&string[11], st, 3)
	line[6] = st[0];
     a5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a5c:	88 a7       	std	Y+40, r24	; 0x28
	line[7] = st[1];
     a5e:	88 a1       	ldd	r24, Y+32	; 0x20
     a60:	89 a7       	std	Y+41, r24	; 0x29
	line[8] = st[2];
     a62:	89 a1       	ldd	r24, Y+33	; 0x21
     a64:	8a a7       	std	Y+42, r24	; 0x2a
	LCDclr();
     a66:	0e 94 ad 10 	call	0x215a	; 0x215a <LCDclr>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e8       	ldi	r26, 0x80	; 128
     a70:	bf e3       	ldi	r27, 0x3F	; 63
     a72:	8b 83       	std	Y+3, r24	; 0x03
     a74:	9c 83       	std	Y+4, r25	; 0x04
     a76:	ad 83       	std	Y+5, r26	; 0x05
     a78:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a7a:	6b 81       	ldd	r22, Y+3	; 0x03
     a7c:	7c 81       	ldd	r23, Y+4	; 0x04
     a7e:	8d 81       	ldd	r24, Y+5	; 0x05
     a80:	9e 81       	ldd	r25, Y+6	; 0x06
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	4a ef       	ldi	r20, 0xFA	; 250
     a88:	54 e4       	ldi	r21, 0x44	; 68
     a8a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	8f 83       	std	Y+7, r24	; 0x07
     a94:	98 87       	std	Y+8, r25	; 0x08
     a96:	a9 87       	std	Y+9, r26	; 0x09
     a98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a9a:	11 e0       	ldi	r17, 0x01	; 1
     a9c:	6f 81       	ldd	r22, Y+7	; 0x07
     a9e:	78 85       	ldd	r23, Y+8	; 0x08
     aa0:	89 85       	ldd	r24, Y+9	; 0x09
     aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e8       	ldi	r20, 0x80	; 128
     aaa:	5f e3       	ldi	r21, 0x3F	; 63
     aac:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
     ab0:	88 23       	and	r24, r24
     ab2:	0c f0       	brlt	.+2      	; 0xab6 <Adc_Stat_LCD+0xba>
     ab4:	10 e0       	ldi	r17, 0x00	; 0
     ab6:	11 23       	and	r17, r17
     ab8:	29 f0       	breq	.+10     	; 0xac4 <Adc_Stat_LCD+0xc8>
		__ticks = 1;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	9c 87       	std	Y+12, r25	; 0x0c
     ac0:	8b 87       	std	Y+11, r24	; 0x0b
     ac2:	46 c0       	rjmp	.+140    	; 0xb50 <Adc_Stat_LCD+0x154>
	else if (__tmp > 65535)
     ac4:	11 e0       	ldi	r17, 0x01	; 1
     ac6:	6f 81       	ldd	r22, Y+7	; 0x07
     ac8:	78 85       	ldd	r23, Y+8	; 0x08
     aca:	89 85       	ldd	r24, Y+9	; 0x09
     acc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	3f ef       	ldi	r19, 0xFF	; 255
     ad2:	4f e7       	ldi	r20, 0x7F	; 127
     ad4:	57 e4       	ldi	r21, 0x47	; 71
     ad6:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
     ada:	18 16       	cp	r1, r24
     adc:	0c f0       	brlt	.+2      	; 0xae0 <Adc_Stat_LCD+0xe4>
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	11 23       	and	r17, r17
     ae2:	61 f1       	breq	.+88     	; 0xb3c <Adc_Stat_LCD+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ae4:	6b 81       	ldd	r22, Y+3	; 0x03
     ae6:	7c 81       	ldd	r23, Y+4	; 0x04
     ae8:	8d 81       	ldd	r24, Y+5	; 0x05
     aea:	9e 81       	ldd	r25, Y+6	; 0x06
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	40 e2       	ldi	r20, 0x20	; 32
     af2:	51 e4       	ldi	r21, 0x41	; 65
     af4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	bc 01       	movw	r22, r24
     afe:	cd 01       	movw	r24, r26
     b00:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	9c 87       	std	Y+12, r25	; 0x0c
     b0a:	8b 87       	std	Y+11, r24	; 0x0b
     b0c:	12 c0       	rjmp	.+36     	; 0xb32 <Adc_Stat_LCD+0x136>
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	9e 87       	std	Y+14, r25	; 0x0e
     b14:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b16:	8d 85       	ldd	r24, Y+13	; 0x0d
     b18:	9e 85       	ldd	r25, Y+14	; 0x0e
     b1a:	8c 01       	movw	r16, r24
     b1c:	c8 01       	movw	r24, r16
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <Adc_Stat_LCD+0x122>
     b22:	8c 01       	movw	r16, r24
     b24:	1e 87       	std	Y+14, r17	; 0x0e
     b26:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b28:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	9c 87       	std	Y+12, r25	; 0x0c
     b30:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b32:	8b 85       	ldd	r24, Y+11	; 0x0b
     b34:	9c 85       	ldd	r25, Y+12	; 0x0c
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	51 f7       	brne	.-44     	; 0xb0e <Adc_Stat_LCD+0x112>
     b3a:	17 c0       	rjmp	.+46     	; 0xb6a <Adc_Stat_LCD+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b3c:	6f 81       	ldd	r22, Y+7	; 0x07
     b3e:	78 85       	ldd	r23, Y+8	; 0x08
     b40:	89 85       	ldd	r24, Y+9	; 0x09
     b42:	9a 85       	ldd	r25, Y+10	; 0x0a
     b44:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	9c 87       	std	Y+12, r25	; 0x0c
     b4e:	8b 87       	std	Y+11, r24	; 0x0b
     b50:	8b 85       	ldd	r24, Y+11	; 0x0b
     b52:	9c 85       	ldd	r25, Y+12	; 0x0c
     b54:	98 8b       	std	Y+16, r25	; 0x10
     b56:	8f 87       	std	Y+15, r24	; 0x0f
     b58:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5a:	98 89       	ldd	r25, Y+16	; 0x10
     b5c:	8c 01       	movw	r16, r24
     b5e:	f8 01       	movw	r30, r16
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <Adc_Stat_LCD+0x164>
     b64:	8f 01       	movw	r16, r30
     b66:	18 8b       	std	Y+16, r17	; 0x10
     b68:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(1);
	LCDGotoXY(0, 0);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <LCDGotoXY>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e8       	ldi	r26, 0x80	; 128
     b78:	bf e3       	ldi	r27, 0x3F	; 63
     b7a:	89 8b       	std	Y+17, r24	; 0x11
     b7c:	9a 8b       	std	Y+18, r25	; 0x12
     b7e:	ab 8b       	std	Y+19, r26	; 0x13
     b80:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b82:	69 89       	ldd	r22, Y+17	; 0x11
     b84:	7a 89       	ldd	r23, Y+18	; 0x12
     b86:	8b 89       	ldd	r24, Y+19	; 0x13
     b88:	9c 89       	ldd	r25, Y+20	; 0x14
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8d 8b       	std	Y+21, r24	; 0x15
     b9c:	9e 8b       	std	Y+22, r25	; 0x16
     b9e:	af 8b       	std	Y+23, r26	; 0x17
     ba0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ba2:	11 e0       	ldi	r17, 0x01	; 1
     ba4:	6d 89       	ldd	r22, Y+21	; 0x15
     ba6:	7e 89       	ldd	r23, Y+22	; 0x16
     ba8:	8f 89       	ldd	r24, Y+23	; 0x17
     baa:	98 8d       	ldd	r25, Y+24	; 0x18
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e8       	ldi	r20, 0x80	; 128
     bb2:	5f e3       	ldi	r21, 0x3F	; 63
     bb4:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
     bb8:	88 23       	and	r24, r24
     bba:	0c f0       	brlt	.+2      	; 0xbbe <Adc_Stat_LCD+0x1c2>
     bbc:	10 e0       	ldi	r17, 0x00	; 0
     bbe:	11 23       	and	r17, r17
     bc0:	29 f0       	breq	.+10     	; 0xbcc <Adc_Stat_LCD+0x1d0>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9a 8f       	std	Y+26, r25	; 0x1a
     bc8:	89 8f       	std	Y+25, r24	; 0x19
     bca:	46 c0       	rjmp	.+140    	; 0xc58 <Adc_Stat_LCD+0x25c>
	else if (__tmp > 65535)
     bcc:	11 e0       	ldi	r17, 0x01	; 1
     bce:	6d 89       	ldd	r22, Y+21	; 0x15
     bd0:	7e 89       	ldd	r23, Y+22	; 0x16
     bd2:	8f 89       	ldd	r24, Y+23	; 0x17
     bd4:	98 8d       	ldd	r25, Y+24	; 0x18
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	0c f0       	brlt	.+2      	; 0xbe8 <Adc_Stat_LCD+0x1ec>
     be6:	10 e0       	ldi	r17, 0x00	; 0
     be8:	11 23       	and	r17, r17
     bea:	61 f1       	breq	.+88     	; 0xc44 <Adc_Stat_LCD+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	69 89       	ldd	r22, Y+17	; 0x11
     bee:	7a 89       	ldd	r23, Y+18	; 0x12
     bf0:	8b 89       	ldd	r24, Y+19	; 0x13
     bf2:	9c 89       	ldd	r25, Y+20	; 0x14
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9a 8f       	std	Y+26, r25	; 0x1a
     c12:	89 8f       	std	Y+25, r24	; 0x19
     c14:	12 c0       	rjmp	.+36     	; 0xc3a <Adc_Stat_LCD+0x23e>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 8f       	std	Y+28, r25	; 0x1c
     c1c:	8b 8f       	std	Y+27, r24	; 0x1b
     c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c22:	8c 01       	movw	r16, r24
     c24:	c8 01       	movw	r24, r16
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <Adc_Stat_LCD+0x22a>
     c2a:	8c 01       	movw	r16, r24
     c2c:	1c 8f       	std	Y+28, r17	; 0x1c
     c2e:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c30:	89 8d       	ldd	r24, Y+25	; 0x19
     c32:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	9a 8f       	std	Y+26, r25	; 0x1a
     c38:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3a:	89 8d       	ldd	r24, Y+25	; 0x19
     c3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	51 f7       	brne	.-44     	; 0xc16 <Adc_Stat_LCD+0x21a>
     c42:	17 c0       	rjmp	.+46     	; 0xc72 <Adc_Stat_LCD+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c44:	6d 89       	ldd	r22, Y+21	; 0x15
     c46:	7e 89       	ldd	r23, Y+22	; 0x16
     c48:	8f 89       	ldd	r24, Y+23	; 0x17
     c4a:	98 8d       	ldd	r25, Y+24	; 0x18
     c4c:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	9a 8f       	std	Y+26, r25	; 0x1a
     c56:	89 8f       	std	Y+25, r24	; 0x19
     c58:	89 8d       	ldd	r24, Y+25	; 0x19
     c5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c5c:	9e 8f       	std	Y+30, r25	; 0x1e
     c5e:	8d 8f       	std	Y+29, r24	; 0x1d
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	8c 01       	movw	r16, r24
     c66:	f8 01       	movw	r30, r16
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <Adc_Stat_LCD+0x26c>
     c6c:	8f 01       	movw	r16, r30
     c6e:	1e 8f       	std	Y+30, r17	; 0x1e
     c70:	0d 8f       	std	Y+29, r16	; 0x1d
	_delay_ms(1);
	lcd_putstring(line);
     c72:	ce 01       	movw	r24, r28
     c74:	82 96       	adiw	r24, 0x22	; 34
     c76:	0e 94 df 04 	call	0x9be	; 0x9be <lcd_putstring>
}
     c7a:	e1 96       	adiw	r28, 0x31	; 49
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <main>:

int main(void)
{
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	2e 97       	sbiw	r28, 0x0e	; 14
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	fuoz_init(); 
     ca8:	0e 94 77 03 	call	0x6ee	; 0x6ee <fuoz_init>
	DDRB |= 1<<0;	
     cac:	84 e2       	ldi	r24, 0x24	; 36
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	24 e2       	ldi	r18, 0x24	; 36
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	f9 01       	movw	r30, r18
     cb6:	20 81       	ld	r18, Z
     cb8:	21 60       	ori	r18, 0x01	; 1
     cba:	fc 01       	movw	r30, r24
     cbc:	20 83       	st	Z, r18
	ADC_Init();
     cbe:	0e 94 a6 12 	call	0x254c	; 0x254c <ADC_Init>
	LCDinit();
     cc2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <LCDinit>
	LCDclr();
     cc6:	0e 94 ad 10 	call	0x215a	; 0x215a <LCDclr>
    while(1)
    {
		LED_OFF;
     cca:	85 e2       	ldi	r24, 0x25	; 37
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	25 e2       	ldi	r18, 0x25	; 37
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	f9 01       	movw	r30, r18
     cd4:	20 81       	ld	r18, Z
     cd6:	2e 7f       	andi	r18, 0xFE	; 254
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
		//progress();
		Adc_Stat_LCD();
     cdc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <Adc_Stat_LCD>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	aa e7       	ldi	r26, 0x7A	; 122
     ce6:	b4 e4       	ldi	r27, 0x44	; 68
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	ab 83       	std	Y+3, r26	; 0x03
     cee:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     cf0:	69 81       	ldd	r22, Y+1	; 0x01
     cf2:	7a 81       	ldd	r23, Y+2	; 0x02
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4a ef       	ldi	r20, 0xFA	; 250
     cfe:	54 e4       	ldi	r21, 0x44	; 68
     d00:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	8d 83       	std	Y+5, r24	; 0x05
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	af 83       	std	Y+7, r26	; 0x07
     d0e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d10:	11 e0       	ldi	r17, 0x01	; 1
     d12:	6d 81       	ldd	r22, Y+5	; 0x05
     d14:	7e 81       	ldd	r23, Y+6	; 0x06
     d16:	8f 81       	ldd	r24, Y+7	; 0x07
     d18:	98 85       	ldd	r25, Y+8	; 0x08
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	0c f0       	brlt	.+2      	; 0xd2c <main+0x9c>
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	11 23       	and	r17, r17
     d2e:	29 f0       	breq	.+10     	; 0xd3a <main+0xaa>
		__ticks = 1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9a 87       	std	Y+10, r25	; 0x0a
     d36:	89 87       	std	Y+9, r24	; 0x09
     d38:	46 c0       	rjmp	.+140    	; 0xdc6 <main+0x136>
	else if (__tmp > 65535)
     d3a:	11 e0       	ldi	r17, 0x01	; 1
     d3c:	6d 81       	ldd	r22, Y+5	; 0x05
     d3e:	7e 81       	ldd	r23, Y+6	; 0x06
     d40:	8f 81       	ldd	r24, Y+7	; 0x07
     d42:	98 85       	ldd	r25, Y+8	; 0x08
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
     d50:	18 16       	cp	r1, r24
     d52:	0c f0       	brlt	.+2      	; 0xd56 <main+0xc6>
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	11 23       	and	r17, r17
     d58:	61 f1       	breq	.+88     	; 0xdb2 <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5a:	69 81       	ldd	r22, Y+1	; 0x01
     d5c:	7a 81       	ldd	r23, Y+2	; 0x02
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e2       	ldi	r20, 0x20	; 32
     d68:	51 e4       	ldi	r21, 0x41	; 65
     d6a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	9a 87       	std	Y+10, r25	; 0x0a
     d80:	89 87       	std	Y+9, r24	; 0x09
     d82:	12 c0       	rjmp	.+36     	; 0xda8 <main+0x118>
     d84:	88 ec       	ldi	r24, 0xC8	; 200
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9c 87       	std	Y+12, r25	; 0x0c
     d8a:	8b 87       	std	Y+11, r24	; 0x0b
     d8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d90:	8c 01       	movw	r16, r24
     d92:	c8 01       	movw	r24, r16
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <main+0x104>
     d98:	8c 01       	movw	r16, r24
     d9a:	1c 87       	std	Y+12, r17	; 0x0c
     d9c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	9a 87       	std	Y+10, r25	; 0x0a
     da6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	51 f7       	brne	.-44     	; 0xd84 <main+0xf4>
		_delay_ms(1000);
		// sjuda mozhno hotj LCD prisoba4itj toljko neljzja zaprewatj prerivanija na dliteljnoe vremja          
    }
     db0:	8c cf       	rjmp	.-232    	; 0xcca <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db2:	6d 81       	ldd	r22, Y+5	; 0x05
     db4:	7e 81       	ldd	r23, Y+6	; 0x06
     db6:	8f 81       	ldd	r24, Y+7	; 0x07
     db8:	98 85       	ldd	r25, Y+8	; 0x08
     dba:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9a 87       	std	Y+10, r25	; 0x0a
     dc4:	89 87       	std	Y+9, r24	; 0x09
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	9e 87       	std	Y+14, r25	; 0x0e
     dcc:	8d 87       	std	Y+13, r24	; 0x0d
     dce:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd2:	8c 01       	movw	r16, r24
     dd4:	f8 01       	movw	r30, r16
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <main+0x146>
     dda:	8f 01       	movw	r16, r30
     ddc:	1e 87       	std	Y+14, r17	; 0x0e
     dde:	0d 87       	std	Y+13, r16	; 0x0d
     de0:	74 cf       	rjmp	.-280    	; 0xcca <main+0x3a>

00000de2 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	e9 97       	sbiw	r28, 0x39	; 57
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	89 af       	std	Y+57, r24	; 0x39

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     dfc:	8b e2       	ldi	r24, 0x2B	; 43
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	29 ad       	ldd	r18, Y+57	; 0x39
     e02:	20 7f       	andi	r18, 0xF0	; 240
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
	LCP|=1<<LCD_RS;
     e08:	8b e2       	ldi	r24, 0x2B	; 43
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	2b e2       	ldi	r18, 0x2B	; 43
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	21 60       	ori	r18, 0x01	; 1
     e16:	fc 01       	movw	r30, r24
     e18:	20 83       	st	Z, r18
	LCP|=1<<LCD_E;		
     e1a:	8b e2       	ldi	r24, 0x2B	; 43
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	2b e2       	ldi	r18, 0x2B	; 43
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	f9 01       	movw	r30, r18
     e24:	20 81       	ld	r18, Z
     e26:	28 60       	ori	r18, 0x08	; 8
     e28:	fc 01       	movw	r30, r24
     e2a:	20 83       	st	Z, r18
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	a0 e8       	ldi	r26, 0x80	; 128
     e32:	bf e3       	ldi	r27, 0x3F	; 63
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	ab 83       	std	Y+3, r26	; 0x03
     e3a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     e3c:	69 81       	ldd	r22, Y+1	; 0x01
     e3e:	7a 81       	ldd	r23, Y+2	; 0x02
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	4a e7       	ldi	r20, 0x7A	; 122
     e4a:	53 e4       	ldi	r21, 0x43	; 67
     e4c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	af 83       	std	Y+7, r26	; 0x07
     e5a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     e5c:	11 e0       	ldi	r17, 0x01	; 1
     e5e:	6d 81       	ldd	r22, Y+5	; 0x05
     e60:	7e 81       	ldd	r23, Y+6	; 0x06
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	0c f0       	brlt	.+2      	; 0xe78 <LCDsendChar+0x96>
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	11 23       	and	r17, r17
     e7a:	29 f0       	breq	.+10     	; 0xe86 <LCDsendChar+0xa4>
		__ticks = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9a 87       	std	Y+10, r25	; 0x0a
     e82:	89 87       	std	Y+9, r24	; 0x09
     e84:	46 c0       	rjmp	.+140    	; 0xf12 <LCDsendChar+0x130>
	else if (__tmp > 65535)
     e86:	11 e0       	ldi	r17, 0x01	; 1
     e88:	6d 81       	ldd	r22, Y+5	; 0x05
     e8a:	7e 81       	ldd	r23, Y+6	; 0x06
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	0c f0       	brlt	.+2      	; 0xea2 <LCDsendChar+0xc0>
     ea0:	10 e0       	ldi	r17, 0x00	; 0
     ea2:	11 23       	and	r17, r17
     ea4:	61 f1       	breq	.+88     	; 0xefe <LCDsendChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea6:	69 81       	ldd	r22, Y+1	; 0x01
     ea8:	7a 81       	ldd	r23, Y+2	; 0x02
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9a 87       	std	Y+10, r25	; 0x0a
     ecc:	89 87       	std	Y+9, r24	; 0x09
     ece:	12 c0       	rjmp	.+36     	; 0xef4 <LCDsendChar+0x112>
     ed0:	89 e1       	ldi	r24, 0x19	; 25
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c 87       	std	Y+12, r25	; 0x0c
     ed6:	8b 87       	std	Y+11, r24	; 0x0b
     ed8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eda:	9c 85       	ldd	r25, Y+12	; 0x0c
     edc:	8c 01       	movw	r16, r24
     ede:	c8 01       	movw	r24, r16
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <LCDsendChar+0xfe>
     ee4:	8c 01       	movw	r16, r24
     ee6:	1c 87       	std	Y+12, r17	; 0x0c
     ee8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	9a 87       	std	Y+10, r25	; 0x0a
     ef2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	51 f7       	brne	.-44     	; 0xed0 <LCDsendChar+0xee>
     efc:	17 c0       	rjmp	.+46     	; 0xf2c <LCDsendChar+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efe:	6d 81       	ldd	r22, Y+5	; 0x05
     f00:	7e 81       	ldd	r23, Y+6	; 0x06
     f02:	8f 81       	ldd	r24, Y+7	; 0x07
     f04:	98 85       	ldd	r25, Y+8	; 0x08
     f06:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9a 87       	std	Y+10, r25	; 0x0a
     f10:	89 87       	std	Y+9, r24	; 0x09
     f12:	89 85       	ldd	r24, Y+9	; 0x09
     f14:	9a 85       	ldd	r25, Y+10	; 0x0a
     f16:	9e 87       	std	Y+14, r25	; 0x0e
     f18:	8d 87       	std	Y+13, r24	; 0x0d
     f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1e:	8c 01       	movw	r16, r24
     f20:	f8 01       	movw	r30, r16
     f22:	31 97       	sbiw	r30, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <LCDsendChar+0x140>
     f26:	8f 01       	movw	r16, r30
     f28:	1e 87       	std	Y+14, r17	; 0x0e
     f2a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     f2c:	8b e2       	ldi	r24, 0x2B	; 43
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	2b e2       	ldi	r18, 0x2B	; 43
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	f9 01       	movw	r30, r18
     f36:	20 81       	ld	r18, Z
     f38:	27 7f       	andi	r18, 0xF7	; 247
     f3a:	fc 01       	movw	r30, r24
     f3c:	20 83       	st	Z, r18
	LCP&=~(1<<LCD_RS);
     f3e:	8b e2       	ldi	r24, 0x2B	; 43
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	2b e2       	ldi	r18, 0x2B	; 43
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	f9 01       	movw	r30, r18
     f48:	20 81       	ld	r18, Z
     f4a:	2e 7f       	andi	r18, 0xFE	; 254
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 83       	st	Z, r18
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 e8       	ldi	r26, 0x80	; 128
     f56:	bf e3       	ldi	r27, 0x3F	; 63
     f58:	8f 87       	std	Y+15, r24	; 0x0f
     f5a:	98 8b       	std	Y+16, r25	; 0x10
     f5c:	a9 8b       	std	Y+17, r26	; 0x11
     f5e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f60:	6f 85       	ldd	r22, Y+15	; 0x0f
     f62:	78 89       	ldd	r23, Y+16	; 0x10
     f64:	89 89       	ldd	r24, Y+17	; 0x11
     f66:	9a 89       	ldd	r25, Y+18	; 0x12
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	4a e7       	ldi	r20, 0x7A	; 122
     f6e:	53 e4       	ldi	r21, 0x43	; 67
     f70:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	8b 8b       	std	Y+19, r24	; 0x13
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	ad 8b       	std	Y+21, r26	; 0x15
     f7e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     f80:	11 e0       	ldi	r17, 0x01	; 1
     f82:	6b 89       	ldd	r22, Y+19	; 0x13
     f84:	7c 89       	ldd	r23, Y+20	; 0x14
     f86:	8d 89       	ldd	r24, Y+21	; 0x15
     f88:	9e 89       	ldd	r25, Y+22	; 0x16
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	5f e3       	ldi	r21, 0x3F	; 63
     f92:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
     f96:	88 23       	and	r24, r24
     f98:	0c f0       	brlt	.+2      	; 0xf9c <LCDsendChar+0x1ba>
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	11 23       	and	r17, r17
     f9e:	29 f0       	breq	.+10     	; 0xfaa <LCDsendChar+0x1c8>
		__ticks = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	98 8f       	std	Y+24, r25	; 0x18
     fa6:	8f 8b       	std	Y+23, r24	; 0x17
     fa8:	46 c0       	rjmp	.+140    	; 0x1036 <LCDsendChar+0x254>
	else if (__tmp > 65535)
     faa:	11 e0       	ldi	r17, 0x01	; 1
     fac:	6b 89       	ldd	r22, Y+19	; 0x13
     fae:	7c 89       	ldd	r23, Y+20	; 0x14
     fb0:	8d 89       	ldd	r24, Y+21	; 0x15
     fb2:	9e 89       	ldd	r25, Y+22	; 0x16
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	57 e4       	ldi	r21, 0x47	; 71
     fbc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
     fc0:	18 16       	cp	r1, r24
     fc2:	0c f0       	brlt	.+2      	; 0xfc6 <LCDsendChar+0x1e4>
     fc4:	10 e0       	ldi	r17, 0x00	; 0
     fc6:	11 23       	and	r17, r17
     fc8:	61 f1       	breq	.+88     	; 0x1022 <LCDsendChar+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	6f 85       	ldd	r22, Y+15	; 0x0f
     fcc:	78 89       	ldd	r23, Y+16	; 0x10
     fce:	89 89       	ldd	r24, Y+17	; 0x11
     fd0:	9a 89       	ldd	r25, Y+18	; 0x12
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	98 8f       	std	Y+24, r25	; 0x18
     ff0:	8f 8b       	std	Y+23, r24	; 0x17
     ff2:	12 c0       	rjmp	.+36     	; 0x1018 <LCDsendChar+0x236>
     ff4:	89 e1       	ldi	r24, 0x19	; 25
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	89 8f       	std	Y+25, r24	; 0x19
     ffc:	89 8d       	ldd	r24, Y+25	; 0x19
     ffe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1000:	8c 01       	movw	r16, r24
    1002:	c8 01       	movw	r24, r16
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <LCDsendChar+0x222>
    1008:	8c 01       	movw	r16, r24
    100a:	1a 8f       	std	Y+26, r17	; 0x1a
    100c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	8f 89       	ldd	r24, Y+23	; 0x17
    1010:	98 8d       	ldd	r25, Y+24	; 0x18
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	98 8f       	std	Y+24, r25	; 0x18
    1016:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	8f 89       	ldd	r24, Y+23	; 0x17
    101a:	98 8d       	ldd	r25, Y+24	; 0x18
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	51 f7       	brne	.-44     	; 0xff4 <LCDsendChar+0x212>
    1020:	17 c0       	rjmp	.+46     	; 0x1050 <LCDsendChar+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6b 89       	ldd	r22, Y+19	; 0x13
    1024:	7c 89       	ldd	r23, Y+20	; 0x14
    1026:	8d 89       	ldd	r24, Y+21	; 0x15
    1028:	9e 89       	ldd	r25, Y+22	; 0x16
    102a:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	98 8f       	std	Y+24, r25	; 0x18
    1034:	8f 8b       	std	Y+23, r24	; 0x17
    1036:	8f 89       	ldd	r24, Y+23	; 0x17
    1038:	98 8d       	ldd	r25, Y+24	; 0x18
    103a:	9c 8f       	std	Y+28, r25	; 0x1c
    103c:	8b 8f       	std	Y+27, r24	; 0x1b
    103e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1042:	8c 01       	movw	r16, r24
    1044:	f8 01       	movw	r30, r16
    1046:	31 97       	sbiw	r30, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <LCDsendChar+0x264>
    104a:	8f 01       	movw	r16, r30
    104c:	1c 8f       	std	Y+28, r17	; 0x1c
    104e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
    1050:	8b e2       	ldi	r24, 0x2B	; 43
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	29 ad       	ldd	r18, Y+57	; 0x39
    1056:	22 2f       	mov	r18, r18
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	22 95       	swap	r18
    105c:	32 95       	swap	r19
    105e:	30 7f       	andi	r19, 0xF0	; 240
    1060:	32 27       	eor	r19, r18
    1062:	20 7f       	andi	r18, 0xF0	; 240
    1064:	32 27       	eor	r19, r18
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
	LCP|=1<<LCD_RS;
    106a:	8b e2       	ldi	r24, 0x2B	; 43
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	2b e2       	ldi	r18, 0x2B	; 43
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	f9 01       	movw	r30, r18
    1074:	20 81       	ld	r18, Z
    1076:	21 60       	ori	r18, 0x01	; 1
    1078:	fc 01       	movw	r30, r24
    107a:	20 83       	st	Z, r18
	LCP|=1<<LCD_E;		
    107c:	8b e2       	ldi	r24, 0x2B	; 43
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	2b e2       	ldi	r18, 0x2B	; 43
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	f9 01       	movw	r30, r18
    1086:	20 81       	ld	r18, Z
    1088:	28 60       	ori	r18, 0x08	; 8
    108a:	fc 01       	movw	r30, r24
    108c:	20 83       	st	Z, r18
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a0 e8       	ldi	r26, 0x80	; 128
    1094:	bf e3       	ldi	r27, 0x3F	; 63
    1096:	8d 8f       	std	Y+29, r24	; 0x1d
    1098:	9e 8f       	std	Y+30, r25	; 0x1e
    109a:	af 8f       	std	Y+31, r26	; 0x1f
    109c:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    109e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    10a0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    10a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a4:	98 a1       	ldd	r25, Y+32	; 0x20
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	4a e7       	ldi	r20, 0x7A	; 122
    10ac:	53 e4       	ldi	r21, 0x43	; 67
    10ae:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	89 a3       	std	Y+33, r24	; 0x21
    10b8:	9a a3       	std	Y+34, r25	; 0x22
    10ba:	ab a3       	std	Y+35, r26	; 0x23
    10bc:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    10be:	11 e0       	ldi	r17, 0x01	; 1
    10c0:	69 a1       	ldd	r22, Y+33	; 0x21
    10c2:	7a a1       	ldd	r23, Y+34	; 0x22
    10c4:	8b a1       	ldd	r24, Y+35	; 0x23
    10c6:	9c a1       	ldd	r25, Y+36	; 0x24
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	0c f0       	brlt	.+2      	; 0x10da <LCDsendChar+0x2f8>
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	11 23       	and	r17, r17
    10dc:	29 f0       	breq	.+10     	; 0x10e8 <LCDsendChar+0x306>
		__ticks = 1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9e a3       	std	Y+38, r25	; 0x26
    10e4:	8d a3       	std	Y+37, r24	; 0x25
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <LCDsendChar+0x392>
	else if (__tmp > 65535)
    10e8:	11 e0       	ldi	r17, 0x01	; 1
    10ea:	69 a1       	ldd	r22, Y+33	; 0x21
    10ec:	7a a1       	ldd	r23, Y+34	; 0x22
    10ee:	8b a1       	ldd	r24, Y+35	; 0x23
    10f0:	9c a1       	ldd	r25, Y+36	; 0x24
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	3f ef       	ldi	r19, 0xFF	; 255
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	57 e4       	ldi	r21, 0x47	; 71
    10fa:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    10fe:	18 16       	cp	r1, r24
    1100:	0c f0       	brlt	.+2      	; 0x1104 <LCDsendChar+0x322>
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	11 23       	and	r17, r17
    1106:	61 f1       	breq	.+88     	; 0x1160 <LCDsendChar+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	6d 8d       	ldd	r22, Y+29	; 0x1d
    110a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    110c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    110e:	98 a1       	ldd	r25, Y+32	; 0x20
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9e a3       	std	Y+38, r25	; 0x26
    112e:	8d a3       	std	Y+37, r24	; 0x25
    1130:	12 c0       	rjmp	.+36     	; 0x1156 <LCDsendChar+0x374>
    1132:	89 e1       	ldi	r24, 0x19	; 25
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	98 a7       	std	Y+40, r25	; 0x28
    1138:	8f a3       	std	Y+39, r24	; 0x27
    113a:	8f a1       	ldd	r24, Y+39	; 0x27
    113c:	98 a5       	ldd	r25, Y+40	; 0x28
    113e:	8c 01       	movw	r16, r24
    1140:	c8 01       	movw	r24, r16
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <LCDsendChar+0x360>
    1146:	8c 01       	movw	r16, r24
    1148:	18 a7       	std	Y+40, r17	; 0x28
    114a:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114c:	8d a1       	ldd	r24, Y+37	; 0x25
    114e:	9e a1       	ldd	r25, Y+38	; 0x26
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	9e a3       	std	Y+38, r25	; 0x26
    1154:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1156:	8d a1       	ldd	r24, Y+37	; 0x25
    1158:	9e a1       	ldd	r25, Y+38	; 0x26
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	51 f7       	brne	.-44     	; 0x1132 <LCDsendChar+0x350>
    115e:	17 c0       	rjmp	.+46     	; 0x118e <LCDsendChar+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1160:	69 a1       	ldd	r22, Y+33	; 0x21
    1162:	7a a1       	ldd	r23, Y+34	; 0x22
    1164:	8b a1       	ldd	r24, Y+35	; 0x23
    1166:	9c a1       	ldd	r25, Y+36	; 0x24
    1168:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9e a3       	std	Y+38, r25	; 0x26
    1172:	8d a3       	std	Y+37, r24	; 0x25
    1174:	8d a1       	ldd	r24, Y+37	; 0x25
    1176:	9e a1       	ldd	r25, Y+38	; 0x26
    1178:	9a a7       	std	Y+42, r25	; 0x2a
    117a:	89 a7       	std	Y+41, r24	; 0x29
    117c:	89 a5       	ldd	r24, Y+41	; 0x29
    117e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1180:	8c 01       	movw	r16, r24
    1182:	f8 01       	movw	r30, r16
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <LCDsendChar+0x3a2>
    1188:	8f 01       	movw	r16, r30
    118a:	1a a7       	std	Y+42, r17	; 0x2a
    118c:	09 a7       	std	Y+41, r16	; 0x29
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
    118e:	8b e2       	ldi	r24, 0x2B	; 43
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	2b e2       	ldi	r18, 0x2B	; 43
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	f9 01       	movw	r30, r18
    1198:	20 81       	ld	r18, Z
    119a:	27 7f       	andi	r18, 0xF7	; 247
    119c:	fc 01       	movw	r30, r24
    119e:	20 83       	st	Z, r18
	LCP&=~(1<<LCD_RS);
    11a0:	8b e2       	ldi	r24, 0x2B	; 43
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	2b e2       	ldi	r18, 0x2B	; 43
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	f9 01       	movw	r30, r18
    11aa:	20 81       	ld	r18, Z
    11ac:	2e 7f       	andi	r18, 0xFE	; 254
    11ae:	fc 01       	movw	r30, r24
    11b0:	20 83       	st	Z, r18
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e8       	ldi	r26, 0x80	; 128
    11b8:	bf e3       	ldi	r27, 0x3F	; 63
    11ba:	8b a7       	std	Y+43, r24	; 0x2b
    11bc:	9c a7       	std	Y+44, r25	; 0x2c
    11be:	ad a7       	std	Y+45, r26	; 0x2d
    11c0:	be a7       	std	Y+46, r27	; 0x2e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	6b a5       	ldd	r22, Y+43	; 0x2b
    11c4:	7c a5       	ldd	r23, Y+44	; 0x2c
    11c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    11c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a e7       	ldi	r20, 0x7A	; 122
    11d0:	53 e4       	ldi	r21, 0x43	; 67
    11d2:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8f a7       	std	Y+47, r24	; 0x2f
    11dc:	98 ab       	std	Y+48, r25	; 0x30
    11de:	a9 ab       	std	Y+49, r26	; 0x31
    11e0:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    11e2:	11 e0       	ldi	r17, 0x01	; 1
    11e4:	6f a5       	ldd	r22, Y+47	; 0x2f
    11e6:	78 a9       	ldd	r23, Y+48	; 0x30
    11e8:	89 a9       	ldd	r24, Y+49	; 0x31
    11ea:	9a a9       	ldd	r25, Y+50	; 0x32
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e8       	ldi	r20, 0x80	; 128
    11f2:	5f e3       	ldi	r21, 0x3F	; 63
    11f4:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    11f8:	88 23       	and	r24, r24
    11fa:	0c f0       	brlt	.+2      	; 0x11fe <LCDsendChar+0x41c>
    11fc:	10 e0       	ldi	r17, 0x00	; 0
    11fe:	11 23       	and	r17, r17
    1200:	29 f0       	breq	.+10     	; 0x120c <LCDsendChar+0x42a>
		__ticks = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9c ab       	std	Y+52, r25	; 0x34
    1208:	8b ab       	std	Y+51, r24	; 0x33
    120a:	46 c0       	rjmp	.+140    	; 0x1298 <LCDsendChar+0x4b6>
	else if (__tmp > 65535)
    120c:	11 e0       	ldi	r17, 0x01	; 1
    120e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1210:	78 a9       	ldd	r23, Y+48	; 0x30
    1212:	89 a9       	ldd	r24, Y+49	; 0x31
    1214:	9a a9       	ldd	r25, Y+50	; 0x32
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	57 e4       	ldi	r21, 0x47	; 71
    121e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	0c f0       	brlt	.+2      	; 0x1228 <LCDsendChar+0x446>
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	11 23       	and	r17, r17
    122a:	61 f1       	breq	.+88     	; 0x1284 <LCDsendChar+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122c:	6b a5       	ldd	r22, Y+43	; 0x2b
    122e:	7c a5       	ldd	r23, Y+44	; 0x2c
    1230:	8d a5       	ldd	r24, Y+45	; 0x2d
    1232:	9e a5       	ldd	r25, Y+46	; 0x2e
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e2       	ldi	r20, 0x20	; 32
    123a:	51 e4       	ldi	r21, 0x41	; 65
    123c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9c ab       	std	Y+52, r25	; 0x34
    1252:	8b ab       	std	Y+51, r24	; 0x33
    1254:	12 c0       	rjmp	.+36     	; 0x127a <LCDsendChar+0x498>
    1256:	89 e1       	ldi	r24, 0x19	; 25
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e ab       	std	Y+54, r25	; 0x36
    125c:	8d ab       	std	Y+53, r24	; 0x35
    125e:	8d a9       	ldd	r24, Y+53	; 0x35
    1260:	9e a9       	ldd	r25, Y+54	; 0x36
    1262:	8c 01       	movw	r16, r24
    1264:	c8 01       	movw	r24, r16
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <LCDsendChar+0x484>
    126a:	8c 01       	movw	r16, r24
    126c:	1e ab       	std	Y+54, r17	; 0x36
    126e:	0d ab       	std	Y+53, r16	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1270:	8b a9       	ldd	r24, Y+51	; 0x33
    1272:	9c a9       	ldd	r25, Y+52	; 0x34
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	9c ab       	std	Y+52, r25	; 0x34
    1278:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	8b a9       	ldd	r24, Y+51	; 0x33
    127c:	9c a9       	ldd	r25, Y+52	; 0x34
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	51 f7       	brne	.-44     	; 0x1256 <LCDsendChar+0x474>
    1282:	17 c0       	rjmp	.+46     	; 0x12b2 <LCDsendChar+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1284:	6f a5       	ldd	r22, Y+47	; 0x2f
    1286:	78 a9       	ldd	r23, Y+48	; 0x30
    1288:	89 a9       	ldd	r24, Y+49	; 0x31
    128a:	9a a9       	ldd	r25, Y+50	; 0x32
    128c:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	9c ab       	std	Y+52, r25	; 0x34
    1296:	8b ab       	std	Y+51, r24	; 0x33
    1298:	8b a9       	ldd	r24, Y+51	; 0x33
    129a:	9c a9       	ldd	r25, Y+52	; 0x34
    129c:	98 af       	std	Y+56, r25	; 0x38
    129e:	8f ab       	std	Y+55, r24	; 0x37
    12a0:	8f a9       	ldd	r24, Y+55	; 0x37
    12a2:	98 ad       	ldd	r25, Y+56	; 0x38
    12a4:	8c 01       	movw	r16, r24
    12a6:	f8 01       	movw	r30, r16
    12a8:	31 97       	sbiw	r30, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <LCDsendChar+0x4c6>
    12ac:	8f 01       	movw	r16, r30
    12ae:	18 af       	std	Y+56, r17	; 0x38
    12b0:	0f ab       	std	Y+55, r16	; 0x37
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
    12b2:	e9 96       	adiw	r28, 0x39	; 57
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	e9 97       	sbiw	r28, 0x39	; 57
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	89 af       	std	Y+57, r24	; 0x39
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    12e2:	8b e2       	ldi	r24, 0x2B	; 43
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	29 ad       	ldd	r18, Y+57	; 0x39
    12e8:	20 7f       	andi	r18, 0xF0	; 240
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
	LCP|=1<<LCD_E;		
    12ee:	8b e2       	ldi	r24, 0x2B	; 43
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	2b e2       	ldi	r18, 0x2B	; 43
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	f9 01       	movw	r30, r18
    12f8:	20 81       	ld	r18, Z
    12fa:	28 60       	ori	r18, 0x08	; 8
    12fc:	fc 01       	movw	r30, r24
    12fe:	20 83       	st	Z, r18
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e8       	ldi	r26, 0x80	; 128
    1306:	bf e3       	ldi	r27, 0x3F	; 63
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	ab 83       	std	Y+3, r26	; 0x03
    130e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	7a 81       	ldd	r23, Y+2	; 0x02
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a e7       	ldi	r20, 0x7A	; 122
    131e:	53 e4       	ldi	r21, 0x43	; 67
    1320:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	af 83       	std	Y+7, r26	; 0x07
    132e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1330:	11 e0       	ldi	r17, 0x01	; 1
    1332:	6d 81       	ldd	r22, Y+5	; 0x05
    1334:	7e 81       	ldd	r23, Y+6	; 0x06
    1336:	8f 81       	ldd	r24, Y+7	; 0x07
    1338:	98 85       	ldd	r25, Y+8	; 0x08
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e8       	ldi	r20, 0x80	; 128
    1340:	5f e3       	ldi	r21, 0x3F	; 63
    1342:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1346:	88 23       	and	r24, r24
    1348:	0c f0       	brlt	.+2      	; 0x134c <LCDsendCommand+0x84>
    134a:	10 e0       	ldi	r17, 0x00	; 0
    134c:	11 23       	and	r17, r17
    134e:	29 f0       	breq	.+10     	; 0x135a <LCDsendCommand+0x92>
		__ticks = 1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9a 87       	std	Y+10, r25	; 0x0a
    1356:	89 87       	std	Y+9, r24	; 0x09
    1358:	46 c0       	rjmp	.+140    	; 0x13e6 <LCDsendCommand+0x11e>
	else if (__tmp > 65535)
    135a:	11 e0       	ldi	r17, 0x01	; 1
    135c:	6d 81       	ldd	r22, Y+5	; 0x05
    135e:	7e 81       	ldd	r23, Y+6	; 0x06
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	0c f0       	brlt	.+2      	; 0x1376 <LCDsendCommand+0xae>
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	11 23       	and	r17, r17
    1378:	61 f1       	breq	.+88     	; 0x13d2 <LCDsendCommand+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137a:	69 81       	ldd	r22, Y+1	; 0x01
    137c:	7a 81       	ldd	r23, Y+2	; 0x02
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	51 e4       	ldi	r21, 0x41	; 65
    138a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9a 87       	std	Y+10, r25	; 0x0a
    13a0:	89 87       	std	Y+9, r24	; 0x09
    13a2:	12 c0       	rjmp	.+36     	; 0x13c8 <LCDsendCommand+0x100>
    13a4:	89 e1       	ldi	r24, 0x19	; 25
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9c 87       	std	Y+12, r25	; 0x0c
    13aa:	8b 87       	std	Y+11, r24	; 0x0b
    13ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    13b0:	8c 01       	movw	r16, r24
    13b2:	c8 01       	movw	r24, r16
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <LCDsendCommand+0xec>
    13b8:	8c 01       	movw	r16, r24
    13ba:	1c 87       	std	Y+12, r17	; 0x0c
    13bc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	9a 87       	std	Y+10, r25	; 0x0a
    13c6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	51 f7       	brne	.-44     	; 0x13a4 <LCDsendCommand+0xdc>
    13d0:	17 c0       	rjmp	.+46     	; 0x1400 <LCDsendCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d2:	6d 81       	ldd	r22, Y+5	; 0x05
    13d4:	7e 81       	ldd	r23, Y+6	; 0x06
    13d6:	8f 81       	ldd	r24, Y+7	; 0x07
    13d8:	98 85       	ldd	r25, Y+8	; 0x08
    13da:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9a 87       	std	Y+10, r25	; 0x0a
    13e4:	89 87       	std	Y+9, r24	; 0x09
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	9e 87       	std	Y+14, r25	; 0x0e
    13ec:	8d 87       	std	Y+13, r24	; 0x0d
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f2:	8c 01       	movw	r16, r24
    13f4:	f8 01       	movw	r30, r16
    13f6:	31 97       	sbiw	r30, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <LCDsendCommand+0x12e>
    13fa:	8f 01       	movw	r16, r30
    13fc:	1e 87       	std	Y+14, r17	; 0x0e
    13fe:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1400:	8b e2       	ldi	r24, 0x2B	; 43
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	2b e2       	ldi	r18, 0x2B	; 43
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	f9 01       	movw	r30, r18
    140a:	20 81       	ld	r18, Z
    140c:	27 7f       	andi	r18, 0xF7	; 247
    140e:	fc 01       	movw	r30, r24
    1410:	20 83       	st	Z, r18
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e8       	ldi	r26, 0x80	; 128
    1418:	bf e3       	ldi	r27, 0x3F	; 63
    141a:	8f 87       	std	Y+15, r24	; 0x0f
    141c:	98 8b       	std	Y+16, r25	; 0x10
    141e:	a9 8b       	std	Y+17, r26	; 0x11
    1420:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6f 85       	ldd	r22, Y+15	; 0x0f
    1424:	78 89       	ldd	r23, Y+16	; 0x10
    1426:	89 89       	ldd	r24, Y+17	; 0x11
    1428:	9a 89       	ldd	r25, Y+18	; 0x12
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	53 e4       	ldi	r21, 0x43	; 67
    1432:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8b 8b       	std	Y+19, r24	; 0x13
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	ad 8b       	std	Y+21, r26	; 0x15
    1440:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1442:	11 e0       	ldi	r17, 0x01	; 1
    1444:	6b 89       	ldd	r22, Y+19	; 0x13
    1446:	7c 89       	ldd	r23, Y+20	; 0x14
    1448:	8d 89       	ldd	r24, Y+21	; 0x15
    144a:	9e 89       	ldd	r25, Y+22	; 0x16
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	0c f0       	brlt	.+2      	; 0x145e <LCDsendCommand+0x196>
    145c:	10 e0       	ldi	r17, 0x00	; 0
    145e:	11 23       	and	r17, r17
    1460:	29 f0       	breq	.+10     	; 0x146c <LCDsendCommand+0x1a4>
		__ticks = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	98 8f       	std	Y+24, r25	; 0x18
    1468:	8f 8b       	std	Y+23, r24	; 0x17
    146a:	46 c0       	rjmp	.+140    	; 0x14f8 <LCDsendCommand+0x230>
	else if (__tmp > 65535)
    146c:	11 e0       	ldi	r17, 0x01	; 1
    146e:	6b 89       	ldd	r22, Y+19	; 0x13
    1470:	7c 89       	ldd	r23, Y+20	; 0x14
    1472:	8d 89       	ldd	r24, Y+21	; 0x15
    1474:	9e 89       	ldd	r25, Y+22	; 0x16
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	0c f0       	brlt	.+2      	; 0x1488 <LCDsendCommand+0x1c0>
    1486:	10 e0       	ldi	r17, 0x00	; 0
    1488:	11 23       	and	r17, r17
    148a:	61 f1       	breq	.+88     	; 0x14e4 <LCDsendCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	6f 85       	ldd	r22, Y+15	; 0x0f
    148e:	78 89       	ldd	r23, Y+16	; 0x10
    1490:	89 89       	ldd	r24, Y+17	; 0x11
    1492:	9a 89       	ldd	r25, Y+18	; 0x12
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	98 8f       	std	Y+24, r25	; 0x18
    14b2:	8f 8b       	std	Y+23, r24	; 0x17
    14b4:	12 c0       	rjmp	.+36     	; 0x14da <LCDsendCommand+0x212>
    14b6:	89 e1       	ldi	r24, 0x19	; 25
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9a 8f       	std	Y+26, r25	; 0x1a
    14bc:	89 8f       	std	Y+25, r24	; 0x19
    14be:	89 8d       	ldd	r24, Y+25	; 0x19
    14c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14c2:	8c 01       	movw	r16, r24
    14c4:	c8 01       	movw	r24, r16
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <LCDsendCommand+0x1fe>
    14ca:	8c 01       	movw	r16, r24
    14cc:	1a 8f       	std	Y+26, r17	; 0x1a
    14ce:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d0:	8f 89       	ldd	r24, Y+23	; 0x17
    14d2:	98 8d       	ldd	r25, Y+24	; 0x18
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	98 8f       	std	Y+24, r25	; 0x18
    14d8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14da:	8f 89       	ldd	r24, Y+23	; 0x17
    14dc:	98 8d       	ldd	r25, Y+24	; 0x18
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	51 f7       	brne	.-44     	; 0x14b6 <LCDsendCommand+0x1ee>
    14e2:	17 c0       	rjmp	.+46     	; 0x1512 <LCDsendCommand+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e4:	6b 89       	ldd	r22, Y+19	; 0x13
    14e6:	7c 89       	ldd	r23, Y+20	; 0x14
    14e8:	8d 89       	ldd	r24, Y+21	; 0x15
    14ea:	9e 89       	ldd	r25, Y+22	; 0x16
    14ec:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	98 8f       	std	Y+24, r25	; 0x18
    14f6:	8f 8b       	std	Y+23, r24	; 0x17
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	9c 8f       	std	Y+28, r25	; 0x1c
    14fe:	8b 8f       	std	Y+27, r24	; 0x1b
    1500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1504:	8c 01       	movw	r16, r24
    1506:	f8 01       	movw	r30, r16
    1508:	31 97       	sbiw	r30, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <LCDsendCommand+0x240>
    150c:	8f 01       	movw	r16, r30
    150e:	1c 8f       	std	Y+28, r17	; 0x1c
    1510:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
    1512:	8b e2       	ldi	r24, 0x2B	; 43
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	29 ad       	ldd	r18, Y+57	; 0x39
    1518:	22 2f       	mov	r18, r18
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	22 95       	swap	r18
    151e:	32 95       	swap	r19
    1520:	30 7f       	andi	r19, 0xF0	; 240
    1522:	32 27       	eor	r19, r18
    1524:	20 7f       	andi	r18, 0xF0	; 240
    1526:	32 27       	eor	r19, r18
    1528:	fc 01       	movw	r30, r24
    152a:	20 83       	st	Z, r18
	LCP|=1<<LCD_E;		
    152c:	8b e2       	ldi	r24, 0x2B	; 43
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	2b e2       	ldi	r18, 0x2B	; 43
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	f9 01       	movw	r30, r18
    1536:	20 81       	ld	r18, Z
    1538:	28 60       	ori	r18, 0x08	; 8
    153a:	fc 01       	movw	r30, r24
    153c:	20 83       	st	Z, r18
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a0 e8       	ldi	r26, 0x80	; 128
    1544:	bf e3       	ldi	r27, 0x3F	; 63
    1546:	8d 8f       	std	Y+29, r24	; 0x1d
    1548:	9e 8f       	std	Y+30, r25	; 0x1e
    154a:	af 8f       	std	Y+31, r26	; 0x1f
    154c:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    154e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1550:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1554:	98 a1       	ldd	r25, Y+32	; 0x20
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	4a e7       	ldi	r20, 0x7A	; 122
    155c:	53 e4       	ldi	r21, 0x43	; 67
    155e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	89 a3       	std	Y+33, r24	; 0x21
    1568:	9a a3       	std	Y+34, r25	; 0x22
    156a:	ab a3       	std	Y+35, r26	; 0x23
    156c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    156e:	11 e0       	ldi	r17, 0x01	; 1
    1570:	69 a1       	ldd	r22, Y+33	; 0x21
    1572:	7a a1       	ldd	r23, Y+34	; 0x22
    1574:	8b a1       	ldd	r24, Y+35	; 0x23
    1576:	9c a1       	ldd	r25, Y+36	; 0x24
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	0c f0       	brlt	.+2      	; 0x158a <LCDsendCommand+0x2c2>
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	11 23       	and	r17, r17
    158c:	29 f0       	breq	.+10     	; 0x1598 <LCDsendCommand+0x2d0>
		__ticks = 1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9e a3       	std	Y+38, r25	; 0x26
    1594:	8d a3       	std	Y+37, r24	; 0x25
    1596:	46 c0       	rjmp	.+140    	; 0x1624 <LCDsendCommand+0x35c>
	else if (__tmp > 65535)
    1598:	11 e0       	ldi	r17, 0x01	; 1
    159a:	69 a1       	ldd	r22, Y+33	; 0x21
    159c:	7a a1       	ldd	r23, Y+34	; 0x22
    159e:	8b a1       	ldd	r24, Y+35	; 0x23
    15a0:	9c a1       	ldd	r25, Y+36	; 0x24
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	0c f0       	brlt	.+2      	; 0x15b4 <LCDsendCommand+0x2ec>
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	11 23       	and	r17, r17
    15b6:	61 f1       	breq	.+88     	; 0x1610 <LCDsendCommand+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15ba:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15be:	98 a1       	ldd	r25, Y+32	; 0x20
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	51 e4       	ldi	r21, 0x41	; 65
    15c8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e a3       	std	Y+38, r25	; 0x26
    15de:	8d a3       	std	Y+37, r24	; 0x25
    15e0:	12 c0       	rjmp	.+36     	; 0x1606 <LCDsendCommand+0x33e>
    15e2:	89 e1       	ldi	r24, 0x19	; 25
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	98 a7       	std	Y+40, r25	; 0x28
    15e8:	8f a3       	std	Y+39, r24	; 0x27
    15ea:	8f a1       	ldd	r24, Y+39	; 0x27
    15ec:	98 a5       	ldd	r25, Y+40	; 0x28
    15ee:	8c 01       	movw	r16, r24
    15f0:	c8 01       	movw	r24, r16
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCDsendCommand+0x32a>
    15f6:	8c 01       	movw	r16, r24
    15f8:	18 a7       	std	Y+40, r17	; 0x28
    15fa:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fc:	8d a1       	ldd	r24, Y+37	; 0x25
    15fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	9e a3       	std	Y+38, r25	; 0x26
    1604:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1606:	8d a1       	ldd	r24, Y+37	; 0x25
    1608:	9e a1       	ldd	r25, Y+38	; 0x26
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	51 f7       	brne	.-44     	; 0x15e2 <LCDsendCommand+0x31a>
    160e:	17 c0       	rjmp	.+46     	; 0x163e <LCDsendCommand+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	69 a1       	ldd	r22, Y+33	; 0x21
    1612:	7a a1       	ldd	r23, Y+34	; 0x22
    1614:	8b a1       	ldd	r24, Y+35	; 0x23
    1616:	9c a1       	ldd	r25, Y+36	; 0x24
    1618:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9e a3       	std	Y+38, r25	; 0x26
    1622:	8d a3       	std	Y+37, r24	; 0x25
    1624:	8d a1       	ldd	r24, Y+37	; 0x25
    1626:	9e a1       	ldd	r25, Y+38	; 0x26
    1628:	9a a7       	std	Y+42, r25	; 0x2a
    162a:	89 a7       	std	Y+41, r24	; 0x29
    162c:	89 a5       	ldd	r24, Y+41	; 0x29
    162e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1630:	8c 01       	movw	r16, r24
    1632:	f8 01       	movw	r30, r16
    1634:	31 97       	sbiw	r30, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCDsendCommand+0x36c>
    1638:	8f 01       	movw	r16, r30
    163a:	1a a7       	std	Y+42, r17	; 0x2a
    163c:	09 a7       	std	Y+41, r16	; 0x29
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    163e:	8b e2       	ldi	r24, 0x2B	; 43
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	2b e2       	ldi	r18, 0x2B	; 43
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	f9 01       	movw	r30, r18
    1648:	20 81       	ld	r18, Z
    164a:	27 7f       	andi	r18, 0xF7	; 247
    164c:	fc 01       	movw	r30, r24
    164e:	20 83       	st	Z, r18
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e8       	ldi	r26, 0x80	; 128
    1656:	bf e3       	ldi	r27, 0x3F	; 63
    1658:	8b a7       	std	Y+43, r24	; 0x2b
    165a:	9c a7       	std	Y+44, r25	; 0x2c
    165c:	ad a7       	std	Y+45, r26	; 0x2d
    165e:	be a7       	std	Y+46, r27	; 0x2e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1660:	6b a5       	ldd	r22, Y+43	; 0x2b
    1662:	7c a5       	ldd	r23, Y+44	; 0x2c
    1664:	8d a5       	ldd	r24, Y+45	; 0x2d
    1666:	9e a5       	ldd	r25, Y+46	; 0x2e
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a e7       	ldi	r20, 0x7A	; 122
    166e:	53 e4       	ldi	r21, 0x43	; 67
    1670:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8f a7       	std	Y+47, r24	; 0x2f
    167a:	98 ab       	std	Y+48, r25	; 0x30
    167c:	a9 ab       	std	Y+49, r26	; 0x31
    167e:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1680:	11 e0       	ldi	r17, 0x01	; 1
    1682:	6f a5       	ldd	r22, Y+47	; 0x2f
    1684:	78 a9       	ldd	r23, Y+48	; 0x30
    1686:	89 a9       	ldd	r24, Y+49	; 0x31
    1688:	9a a9       	ldd	r25, Y+50	; 0x32
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1696:	88 23       	and	r24, r24
    1698:	0c f0       	brlt	.+2      	; 0x169c <LCDsendCommand+0x3d4>
    169a:	10 e0       	ldi	r17, 0x00	; 0
    169c:	11 23       	and	r17, r17
    169e:	29 f0       	breq	.+10     	; 0x16aa <LCDsendCommand+0x3e2>
		__ticks = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c ab       	std	Y+52, r25	; 0x34
    16a6:	8b ab       	std	Y+51, r24	; 0x33
    16a8:	46 c0       	rjmp	.+140    	; 0x1736 <LCDsendCommand+0x46e>
	else if (__tmp > 65535)
    16aa:	11 e0       	ldi	r17, 0x01	; 1
    16ac:	6f a5       	ldd	r22, Y+47	; 0x2f
    16ae:	78 a9       	ldd	r23, Y+48	; 0x30
    16b0:	89 a9       	ldd	r24, Y+49	; 0x31
    16b2:	9a a9       	ldd	r25, Y+50	; 0x32
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <LCDsendCommand+0x3fe>
    16c4:	10 e0       	ldi	r17, 0x00	; 0
    16c6:	11 23       	and	r17, r17
    16c8:	61 f1       	breq	.+88     	; 0x1722 <LCDsendCommand+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    16cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    16ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    16d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e2       	ldi	r20, 0x20	; 32
    16d8:	51 e4       	ldi	r21, 0x41	; 65
    16da:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9c ab       	std	Y+52, r25	; 0x34
    16f0:	8b ab       	std	Y+51, r24	; 0x33
    16f2:	12 c0       	rjmp	.+36     	; 0x1718 <LCDsendCommand+0x450>
    16f4:	89 e1       	ldi	r24, 0x19	; 25
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9e ab       	std	Y+54, r25	; 0x36
    16fa:	8d ab       	std	Y+53, r24	; 0x35
    16fc:	8d a9       	ldd	r24, Y+53	; 0x35
    16fe:	9e a9       	ldd	r25, Y+54	; 0x36
    1700:	8c 01       	movw	r16, r24
    1702:	c8 01       	movw	r24, r16
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCDsendCommand+0x43c>
    1708:	8c 01       	movw	r16, r24
    170a:	1e ab       	std	Y+54, r17	; 0x36
    170c:	0d ab       	std	Y+53, r16	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170e:	8b a9       	ldd	r24, Y+51	; 0x33
    1710:	9c a9       	ldd	r25, Y+52	; 0x34
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	9c ab       	std	Y+52, r25	; 0x34
    1716:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1718:	8b a9       	ldd	r24, Y+51	; 0x33
    171a:	9c a9       	ldd	r25, Y+52	; 0x34
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	51 f7       	brne	.-44     	; 0x16f4 <LCDsendCommand+0x42c>
    1720:	17 c0       	rjmp	.+46     	; 0x1750 <LCDsendCommand+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1722:	6f a5       	ldd	r22, Y+47	; 0x2f
    1724:	78 a9       	ldd	r23, Y+48	; 0x30
    1726:	89 a9       	ldd	r24, Y+49	; 0x31
    1728:	9a a9       	ldd	r25, Y+50	; 0x32
    172a:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9c ab       	std	Y+52, r25	; 0x34
    1734:	8b ab       	std	Y+51, r24	; 0x33
    1736:	8b a9       	ldd	r24, Y+51	; 0x33
    1738:	9c a9       	ldd	r25, Y+52	; 0x34
    173a:	98 af       	std	Y+56, r25	; 0x38
    173c:	8f ab       	std	Y+55, r24	; 0x37
    173e:	8f a9       	ldd	r24, Y+55	; 0x37
    1740:	98 ad       	ldd	r25, Y+56	; 0x38
    1742:	8c 01       	movw	r16, r24
    1744:	f8 01       	movw	r30, r16
    1746:	31 97       	sbiw	r30, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCDsendCommand+0x47e>
    174a:	8f 01       	movw	r16, r30
    174c:	18 af       	std	Y+56, r17	; 0x38
    174e:	0f ab       	std	Y+55, r16	; 0x37
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
    1750:	e9 96       	adiw	r28, 0x39	; 57
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	08 95       	ret

00001766 <LCDinit>:
void LCDinit(void)//Initializes LCD
{
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	c4 56       	subi	r28, 0x64	; 100
    1774:	d0 40       	sbci	r29, 0x00	; 0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a0 e7       	ldi	r26, 0x70	; 112
    1786:	b1 e4       	ldi	r27, 0x41	; 65
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	ad 83       	std	Y+5, r26	; 0x05
    178e:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6b 81       	ldd	r22, Y+3	; 0x03
    1792:	7c 81       	ldd	r23, Y+4	; 0x04
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	53 e4       	ldi	r21, 0x43	; 67
    17a0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8f 83       	std	Y+7, r24	; 0x07
    17aa:	98 87       	std	Y+8, r25	; 0x08
    17ac:	a9 87       	std	Y+9, r26	; 0x09
    17ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b0:	11 e0       	ldi	r17, 0x01	; 1
    17b2:	6f 81       	ldd	r22, Y+7	; 0x07
    17b4:	78 85       	ldd	r23, Y+8	; 0x08
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	0c f0       	brlt	.+2      	; 0x17cc <LCDinit+0x66>
    17ca:	10 e0       	ldi	r17, 0x00	; 0
    17cc:	11 23       	and	r17, r17
    17ce:	29 f0       	breq	.+10     	; 0x17da <LCDinit+0x74>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c 87       	std	Y+12, r25	; 0x0c
    17d6:	8b 87       	std	Y+11, r24	; 0x0b
    17d8:	46 c0       	rjmp	.+140    	; 0x1866 <LCDinit+0x100>
	else if (__tmp > 65535)
    17da:	11 e0       	ldi	r17, 0x01	; 1
    17dc:	6f 81       	ldd	r22, Y+7	; 0x07
    17de:	78 85       	ldd	r23, Y+8	; 0x08
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	0c f0       	brlt	.+2      	; 0x17f6 <LCDinit+0x90>
    17f4:	10 e0       	ldi	r17, 0x00	; 0
    17f6:	11 23       	and	r17, r17
    17f8:	61 f1       	breq	.+88     	; 0x1852 <LCDinit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6b 81       	ldd	r22, Y+3	; 0x03
    17fc:	7c 81       	ldd	r23, Y+4	; 0x04
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9c 87       	std	Y+12, r25	; 0x0c
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	12 c0       	rjmp	.+36     	; 0x1848 <LCDinit+0xe2>
    1824:	89 e1       	ldi	r24, 0x19	; 25
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 87       	std	Y+14, r25	; 0x0e
    182a:	8d 87       	std	Y+13, r24	; 0x0d
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	8c 01       	movw	r16, r24
    1832:	c8 01       	movw	r24, r16
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCDinit+0xce>
    1838:	8c 01       	movw	r16, r24
    183a:	1e 87       	std	Y+14, r17	; 0x0e
    183c:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1840:	9c 85       	ldd	r25, Y+12	; 0x0c
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	9c 87       	std	Y+12, r25	; 0x0c
    1846:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1848:	8b 85       	ldd	r24, Y+11	; 0x0b
    184a:	9c 85       	ldd	r25, Y+12	; 0x0c
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	51 f7       	brne	.-44     	; 0x1824 <LCDinit+0xbe>
    1850:	17 c0       	rjmp	.+46     	; 0x1880 <LCDinit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	6f 81       	ldd	r22, Y+7	; 0x07
    1854:	78 85       	ldd	r23, Y+8	; 0x08
    1856:	89 85       	ldd	r24, Y+9	; 0x09
    1858:	9a 85       	ldd	r25, Y+10	; 0x0a
    185a:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9c 87       	std	Y+12, r25	; 0x0c
    1864:	8b 87       	std	Y+11, r24	; 0x0b
    1866:	8b 85       	ldd	r24, Y+11	; 0x0b
    1868:	9c 85       	ldd	r25, Y+12	; 0x0c
    186a:	98 8b       	std	Y+16, r25	; 0x10
    186c:	8f 87       	std	Y+15, r24	; 0x0f
    186e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1870:	98 89       	ldd	r25, Y+16	; 0x10
    1872:	8c 01       	movw	r16, r24
    1874:	f8 01       	movw	r30, r16
    1876:	31 97       	sbiw	r30, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCDinit+0x110>
    187a:	8f 01       	movw	r16, r30
    187c:	18 8b       	std	Y+16, r17	; 0x10
    187e:	0f 87       	std	Y+15, r16	; 0x0f
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1880:	8b e2       	ldi	r24, 0x2B	; 43
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	fc 01       	movw	r30, r24
    1886:	10 82       	st	Z, r1
	LCP=0x00;
    1888:	8b e2       	ldi	r24, 0x2B	; 43
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	fc 01       	movw	r30, r24
    188e:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1890:	8a e2       	ldi	r24, 0x2A	; 42
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	2a e2       	ldi	r18, 0x2A	; 42
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	f9 01       	movw	r30, r18
    189a:	20 81       	ld	r18, Z
    189c:	20 6f       	ori	r18, 0xF0	; 240
    189e:	fc 01       	movw	r30, r24
    18a0:	20 83       	st	Z, r18
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    18a2:	8a e2       	ldi	r24, 0x2A	; 42
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	2a e2       	ldi	r18, 0x2A	; 42
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	f9 01       	movw	r30, r18
    18ac:	20 81       	ld	r18, Z
    18ae:	2b 60       	ori	r18, 0x0B	; 11
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    18b4:	8b e2       	ldi	r24, 0x2B	; 43
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	20 e3       	ldi	r18, 0x30	; 48
    18ba:	fc 01       	movw	r30, r24
    18bc:	20 83       	st	Z, r18
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18be:	8b e2       	ldi	r24, 0x2B	; 43
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	2b e2       	ldi	r18, 0x2B	; 43
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	f9 01       	movw	r30, r18
    18c8:	20 81       	ld	r18, Z
    18ca:	28 60       	ori	r18, 0x08	; 8
    18cc:	fc 01       	movw	r30, r24
    18ce:	20 83       	st	Z, r18
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	89 8b       	std	Y+17, r24	; 0x11
    18da:	9a 8b       	std	Y+18, r25	; 0x12
    18dc:	ab 8b       	std	Y+19, r26	; 0x13
    18de:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	69 89       	ldd	r22, Y+17	; 0x11
    18e2:	7a 89       	ldd	r23, Y+18	; 0x12
    18e4:	8b 89       	ldd	r24, Y+19	; 0x13
    18e6:	9c 89       	ldd	r25, Y+20	; 0x14
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a e7       	ldi	r20, 0x7A	; 122
    18ee:	53 e4       	ldi	r21, 0x43	; 67
    18f0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8d 8b       	std	Y+21, r24	; 0x15
    18fa:	9e 8b       	std	Y+22, r25	; 0x16
    18fc:	af 8b       	std	Y+23, r26	; 0x17
    18fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1900:	11 e0       	ldi	r17, 0x01	; 1
    1902:	6d 89       	ldd	r22, Y+21	; 0x15
    1904:	7e 89       	ldd	r23, Y+22	; 0x16
    1906:	8f 89       	ldd	r24, Y+23	; 0x17
    1908:	98 8d       	ldd	r25, Y+24	; 0x18
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	5f e3       	ldi	r21, 0x3F	; 63
    1912:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1916:	88 23       	and	r24, r24
    1918:	0c f0       	brlt	.+2      	; 0x191c <LCDinit+0x1b6>
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	11 23       	and	r17, r17
    191e:	29 f0       	breq	.+10     	; 0x192a <LCDinit+0x1c4>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9a 8f       	std	Y+26, r25	; 0x1a
    1926:	89 8f       	std	Y+25, r24	; 0x19
    1928:	46 c0       	rjmp	.+140    	; 0x19b6 <LCDinit+0x250>
	else if (__tmp > 65535)
    192a:	11 e0       	ldi	r17, 0x01	; 1
    192c:	6d 89       	ldd	r22, Y+21	; 0x15
    192e:	7e 89       	ldd	r23, Y+22	; 0x16
    1930:	8f 89       	ldd	r24, Y+23	; 0x17
    1932:	98 8d       	ldd	r25, Y+24	; 0x18
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	0c f0       	brlt	.+2      	; 0x1946 <LCDinit+0x1e0>
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	11 23       	and	r17, r17
    1948:	61 f1       	breq	.+88     	; 0x19a2 <LCDinit+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	69 89       	ldd	r22, Y+17	; 0x11
    194c:	7a 89       	ldd	r23, Y+18	; 0x12
    194e:	8b 89       	ldd	r24, Y+19	; 0x13
    1950:	9c 89       	ldd	r25, Y+20	; 0x14
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9a 8f       	std	Y+26, r25	; 0x1a
    1970:	89 8f       	std	Y+25, r24	; 0x19
    1972:	12 c0       	rjmp	.+36     	; 0x1998 <LCDinit+0x232>
    1974:	89 e1       	ldi	r24, 0x19	; 25
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9c 8f       	std	Y+28, r25	; 0x1c
    197a:	8b 8f       	std	Y+27, r24	; 0x1b
    197c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1980:	8c 01       	movw	r16, r24
    1982:	c8 01       	movw	r24, r16
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCDinit+0x21e>
    1988:	8c 01       	movw	r16, r24
    198a:	1c 8f       	std	Y+28, r17	; 0x1c
    198c:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	89 8d       	ldd	r24, Y+25	; 0x19
    1990:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9a 8f       	std	Y+26, r25	; 0x1a
    1996:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	89 8d       	ldd	r24, Y+25	; 0x19
    199a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	51 f7       	brne	.-44     	; 0x1974 <LCDinit+0x20e>
    19a0:	17 c0       	rjmp	.+46     	; 0x19d0 <LCDinit+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	6d 89       	ldd	r22, Y+21	; 0x15
    19a4:	7e 89       	ldd	r23, Y+22	; 0x16
    19a6:	8f 89       	ldd	r24, Y+23	; 0x17
    19a8:	98 8d       	ldd	r25, Y+24	; 0x18
    19aa:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9a 8f       	std	Y+26, r25	; 0x1a
    19b4:	89 8f       	std	Y+25, r24	; 0x19
    19b6:	89 8d       	ldd	r24, Y+25	; 0x19
    19b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19ba:	9e 8f       	std	Y+30, r25	; 0x1e
    19bc:	8d 8f       	std	Y+29, r24	; 0x1d
    19be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c2:	8c 01       	movw	r16, r24
    19c4:	f8 01       	movw	r30, r16
    19c6:	31 97       	sbiw	r30, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCDinit+0x260>
    19ca:	8f 01       	movw	r16, r30
    19cc:	1e 8f       	std	Y+30, r17	; 0x1e
    19ce:	0d 8f       	std	Y+29, r16	; 0x1d
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    19d0:	8b e2       	ldi	r24, 0x2B	; 43
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	2b e2       	ldi	r18, 0x2B	; 43
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	f9 01       	movw	r30, r18
    19da:	20 81       	ld	r18, Z
    19dc:	27 7f       	andi	r18, 0xF7	; 247
    19de:	fc 01       	movw	r30, r24
    19e0:	20 83       	st	Z, r18
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e8       	ldi	r26, 0x80	; 128
    19e8:	bf e3       	ldi	r27, 0x3F	; 63
    19ea:	8f 8f       	std	Y+31, r24	; 0x1f
    19ec:	98 a3       	std	Y+32, r25	; 0x20
    19ee:	a9 a3       	std	Y+33, r26	; 0x21
    19f0:	ba a3       	std	Y+34, r27	; 0x22
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19f4:	78 a1       	ldd	r23, Y+32	; 0x20
    19f6:	89 a1       	ldd	r24, Y+33	; 0x21
    19f8:	9a a1       	ldd	r25, Y+34	; 0x22
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	53 e4       	ldi	r21, 0x43	; 67
    1a02:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	8b a3       	std	Y+35, r24	; 0x23
    1a0c:	9c a3       	std	Y+36, r25	; 0x24
    1a0e:	ad a3       	std	Y+37, r26	; 0x25
    1a10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a12:	11 e0       	ldi	r17, 0x01	; 1
    1a14:	6b a1       	ldd	r22, Y+35	; 0x23
    1a16:	7c a1       	ldd	r23, Y+36	; 0x24
    1a18:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	0c f0       	brlt	.+2      	; 0x1a2e <LCDinit+0x2c8>
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	11 23       	and	r17, r17
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <LCDinit+0x2d6>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	98 a7       	std	Y+40, r25	; 0x28
    1a38:	8f a3       	std	Y+39, r24	; 0x27
    1a3a:	46 c0       	rjmp	.+140    	; 0x1ac8 <LCDinit+0x362>
	else if (__tmp > 65535)
    1a3c:	11 e0       	ldi	r17, 0x01	; 1
    1a3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a40:	7c a1       	ldd	r23, Y+36	; 0x24
    1a42:	8d a1       	ldd	r24, Y+37	; 0x25
    1a44:	9e a1       	ldd	r25, Y+38	; 0x26
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	0c f0       	brlt	.+2      	; 0x1a58 <LCDinit+0x2f2>
    1a56:	10 e0       	ldi	r17, 0x00	; 0
    1a58:	11 23       	and	r17, r17
    1a5a:	61 f1       	breq	.+88     	; 0x1ab4 <LCDinit+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a5e:	78 a1       	ldd	r23, Y+32	; 0x20
    1a60:	89 a1       	ldd	r24, Y+33	; 0x21
    1a62:	9a a1       	ldd	r25, Y+34	; 0x22
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	98 a7       	std	Y+40, r25	; 0x28
    1a82:	8f a3       	std	Y+39, r24	; 0x27
    1a84:	12 c0       	rjmp	.+36     	; 0x1aaa <LCDinit+0x344>
    1a86:	89 e1       	ldi	r24, 0x19	; 25
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9a a7       	std	Y+42, r25	; 0x2a
    1a8c:	89 a7       	std	Y+41, r24	; 0x29
    1a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a92:	8c 01       	movw	r16, r24
    1a94:	c8 01       	movw	r24, r16
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCDinit+0x330>
    1a9a:	8c 01       	movw	r16, r24
    1a9c:	1a a7       	std	Y+42, r17	; 0x2a
    1a9e:	09 a7       	std	Y+41, r16	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8f a1       	ldd	r24, Y+39	; 0x27
    1aa2:	98 a5       	ldd	r25, Y+40	; 0x28
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	98 a7       	std	Y+40, r25	; 0x28
    1aa8:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8f a1       	ldd	r24, Y+39	; 0x27
    1aac:	98 a5       	ldd	r25, Y+40	; 0x28
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	51 f7       	brne	.-44     	; 0x1a86 <LCDinit+0x320>
    1ab2:	17 c0       	rjmp	.+46     	; 0x1ae2 <LCDinit+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aba:	9e a1       	ldd	r25, Y+38	; 0x26
    1abc:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	98 a7       	std	Y+40, r25	; 0x28
    1ac6:	8f a3       	std	Y+39, r24	; 0x27
    1ac8:	8f a1       	ldd	r24, Y+39	; 0x27
    1aca:	98 a5       	ldd	r25, Y+40	; 0x28
    1acc:	9c a7       	std	Y+44, r25	; 0x2c
    1ace:	8b a7       	std	Y+43, r24	; 0x2b
    1ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad4:	8c 01       	movw	r16, r24
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	31 97       	sbiw	r30, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCDinit+0x372>
    1adc:	8f 01       	movw	r16, r30
    1ade:	1c a7       	std	Y+44, r17	; 0x2c
    1ae0:	0b a7       	std	Y+43, r16	; 0x2b
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1ae2:	8b e2       	ldi	r24, 0x2B	; 43
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	20 e3       	ldi	r18, 0x30	; 48
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 83       	st	Z, r18
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1aec:	8b e2       	ldi	r24, 0x2B	; 43
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	2b e2       	ldi	r18, 0x2B	; 43
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	f9 01       	movw	r30, r18
    1af6:	20 81       	ld	r18, Z
    1af8:	28 60       	ori	r18, 0x08	; 8
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e8       	ldi	r26, 0x80	; 128
    1b04:	bf e3       	ldi	r27, 0x3F	; 63
    1b06:	8d a7       	std	Y+45, r24	; 0x2d
    1b08:	9e a7       	std	Y+46, r25	; 0x2e
    1b0a:	af a7       	std	Y+47, r26	; 0x2f
    1b0c:	b8 ab       	std	Y+48, r27	; 0x30
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b10:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b14:	98 a9       	ldd	r25, Y+48	; 0x30
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a e7       	ldi	r20, 0x7A	; 122
    1b1c:	53 e4       	ldi	r21, 0x43	; 67
    1b1e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	89 ab       	std	Y+49, r24	; 0x31
    1b28:	9a ab       	std	Y+50, r25	; 0x32
    1b2a:	ab ab       	std	Y+51, r26	; 0x33
    1b2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b2e:	11 e0       	ldi	r17, 0x01	; 1
    1b30:	69 a9       	ldd	r22, Y+49	; 0x31
    1b32:	7a a9       	ldd	r23, Y+50	; 0x32
    1b34:	8b a9       	ldd	r24, Y+51	; 0x33
    1b36:	9c a9       	ldd	r25, Y+52	; 0x34
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <LCDinit+0x3e4>
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	11 23       	and	r17, r17
    1b4c:	29 f0       	breq	.+10     	; 0x1b58 <LCDinit+0x3f2>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9e ab       	std	Y+54, r25	; 0x36
    1b54:	8d ab       	std	Y+53, r24	; 0x35
    1b56:	46 c0       	rjmp	.+140    	; 0x1be4 <LCDinit+0x47e>
	else if (__tmp > 65535)
    1b58:	11 e0       	ldi	r17, 0x01	; 1
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <LCDinit+0x40e>
    1b72:	10 e0       	ldi	r17, 0x00	; 0
    1b74:	11 23       	and	r17, r17
    1b76:	61 f1       	breq	.+88     	; 0x1bd0 <LCDinit+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9e ab       	std	Y+54, r25	; 0x36
    1b9e:	8d ab       	std	Y+53, r24	; 0x35
    1ba0:	12 c0       	rjmp	.+36     	; 0x1bc6 <LCDinit+0x460>
    1ba2:	89 e1       	ldi	r24, 0x19	; 25
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	98 af       	std	Y+56, r25	; 0x38
    1ba8:	8f ab       	std	Y+55, r24	; 0x37
    1baa:	8f a9       	ldd	r24, Y+55	; 0x37
    1bac:	98 ad       	ldd	r25, Y+56	; 0x38
    1bae:	8c 01       	movw	r16, r24
    1bb0:	c8 01       	movw	r24, r16
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCDinit+0x44c>
    1bb6:	8c 01       	movw	r16, r24
    1bb8:	18 af       	std	Y+56, r17	; 0x38
    1bba:	0f ab       	std	Y+55, r16	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8d a9       	ldd	r24, Y+53	; 0x35
    1bbe:	9e a9       	ldd	r25, Y+54	; 0x36
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9e ab       	std	Y+54, r25	; 0x36
    1bc4:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8d a9       	ldd	r24, Y+53	; 0x35
    1bc8:	9e a9       	ldd	r25, Y+54	; 0x36
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	51 f7       	brne	.-44     	; 0x1ba2 <LCDinit+0x43c>
    1bce:	17 c0       	rjmp	.+46     	; 0x1bfe <LCDinit+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd8:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e ab       	std	Y+54, r25	; 0x36
    1be2:	8d ab       	std	Y+53, r24	; 0x35
    1be4:	8d a9       	ldd	r24, Y+53	; 0x35
    1be6:	9e a9       	ldd	r25, Y+54	; 0x36
    1be8:	9a af       	std	Y+58, r25	; 0x3a
    1bea:	89 af       	std	Y+57, r24	; 0x39
    1bec:	89 ad       	ldd	r24, Y+57	; 0x39
    1bee:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bf0:	8c 01       	movw	r16, r24
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	31 97       	sbiw	r30, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCDinit+0x48e>
    1bf8:	8f 01       	movw	r16, r30
    1bfa:	1a af       	std	Y+58, r17	; 0x3a
    1bfc:	09 af       	std	Y+57, r16	; 0x39
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1bfe:	8b e2       	ldi	r24, 0x2B	; 43
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	2b e2       	ldi	r18, 0x2B	; 43
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	20 81       	ld	r18, Z
    1c0a:	27 7f       	andi	r18, 0xF7	; 247
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	8b af       	std	Y+59, r24	; 0x3b
    1c1a:	9c af       	std	Y+60, r25	; 0x3c
    1c1c:	ad af       	std	Y+61, r26	; 0x3d
    1c1e:	be af       	std	Y+62, r27	; 0x3e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	8e 01       	movw	r16, r28
    1c22:	01 5c       	subi	r16, 0xC1	; 193
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c28:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a e7       	ldi	r20, 0x7A	; 122
    1c34:	53 e4       	ldi	r21, 0x43	; 67
    1c36:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	80 83       	st	Z, r24
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	a2 83       	std	Z+2, r26	; 0x02
    1c46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c48:	ce 01       	movw	r24, r28
    1c4a:	cf 96       	adiw	r24, 0x3f	; 63
    1c4c:	11 e0       	ldi	r17, 0x01	; 1
    1c4e:	fc 01       	movw	r30, r24
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	0c f0       	brlt	.+2      	; 0x1c6a <LCDinit+0x504>
    1c68:	10 e0       	ldi	r17, 0x00	; 0
    1c6a:	11 23       	and	r17, r17
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <LCDinit+0x51a>
		__ticks = 1;
    1c6e:	ce 01       	movw	r24, r28
    1c70:	8d 5b       	subi	r24, 0xBD	; 189
    1c72:	9f 4f       	sbci	r25, 0xFF	; 255
    1c74:	21 e0       	ldi	r18, 0x01	; 1
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	fc 01       	movw	r30, r24
    1c7a:	31 83       	std	Z+1, r19	; 0x01
    1c7c:	20 83       	st	Z, r18
    1c7e:	6e c0       	rjmp	.+220    	; 0x1d5c <LCDinit+0x5f6>
	else if (__tmp > 65535)
    1c80:	ce 01       	movw	r24, r28
    1c82:	cf 96       	adiw	r24, 0x3f	; 63
    1c84:	11 e0       	ldi	r17, 0x01	; 1
    1c86:	fc 01       	movw	r30, r24
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	0c f0       	brlt	.+2      	; 0x1ca2 <LCDinit+0x53c>
    1ca0:	10 e0       	ldi	r17, 0x00	; 0
    1ca2:	11 23       	and	r17, r17
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <LCDinit+0x542>
    1ca6:	49 c0       	rjmp	.+146    	; 0x1d3a <LCDinit+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1caa:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cac:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cae:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	8e 01       	movw	r16, r28
    1cc2:	0d 5b       	subi	r16, 0xBD	; 189
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	27 c0       	rjmp	.+78     	; 0x1d28 <LCDinit+0x5c2>
    1cda:	ce 01       	movw	r24, r28
    1cdc:	8b 5b       	subi	r24, 0xBB	; 187
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	29 e1       	ldi	r18, 0x19	; 25
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	31 83       	std	Z+1, r19	; 0x01
    1ce8:	20 83       	st	Z, r18
    1cea:	ce 01       	movw	r24, r28
    1cec:	8b 5b       	subi	r24, 0xBB	; 187
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCDinit+0x594>
    1cfe:	8c 01       	movw	r16, r24
    1d00:	ce 01       	movw	r24, r28
    1d02:	8b 5b       	subi	r24, 0xBB	; 187
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	fc 01       	movw	r30, r24
    1d08:	11 83       	std	Z+1, r17	; 0x01
    1d0a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	8d 5b       	subi	r24, 0xBD	; 189
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	9e 01       	movw	r18, r28
    1d14:	2d 5b       	subi	r18, 0xBD	; 189
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	f9 01       	movw	r30, r18
    1d1a:	20 81       	ld	r18, Z
    1d1c:	31 81       	ldd	r19, Z+1	; 0x01
    1d1e:	21 50       	subi	r18, 0x01	; 1
    1d20:	30 40       	sbci	r19, 0x00	; 0
    1d22:	fc 01       	movw	r30, r24
    1d24:	31 83       	std	Z+1, r19	; 0x01
    1d26:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	ce 01       	movw	r24, r28
    1d2a:	8d 5b       	subi	r24, 0xBD	; 189
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	fc 01       	movw	r30, r24
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	89 f6       	brne	.-94     	; 0x1cda <LCDinit+0x574>
    1d38:	2e c0       	rjmp	.+92     	; 0x1d96 <LCDinit+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	8e 01       	movw	r16, r28
    1d3c:	0d 5b       	subi	r16, 0xBD	; 189
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	ce 01       	movw	r24, r28
    1d42:	cf 96       	adiw	r24, 0x3f	; 63
    1d44:	fc 01       	movw	r30, r24
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	f8 01       	movw	r30, r16
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	89 5b       	subi	r24, 0xB9	; 185
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	9e 01       	movw	r18, r28
    1d64:	2d 5b       	subi	r18, 0xBD	; 189
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	f9 01       	movw	r30, r18
    1d6a:	20 81       	ld	r18, Z
    1d6c:	31 81       	ldd	r19, Z+1	; 0x01
    1d6e:	fc 01       	movw	r30, r24
    1d70:	31 83       	std	Z+1, r19	; 0x01
    1d72:	20 83       	st	Z, r18
    1d74:	ce 01       	movw	r24, r28
    1d76:	89 5b       	subi	r24, 0xB9	; 185
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	80 81       	ld	r24, Z
    1d7e:	91 81       	ldd	r25, Z+1	; 0x01
    1d80:	8c 01       	movw	r16, r24
    1d82:	c8 01       	movw	r24, r16
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCDinit+0x61e>
    1d88:	8c 01       	movw	r16, r24
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	89 5b       	subi	r24, 0xB9	; 185
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	fc 01       	movw	r30, r24
    1d92:	11 83       	std	Z+1, r17	; 0x01
    1d94:	00 83       	st	Z, r16
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1d96:	8b e2       	ldi	r24, 0x2B	; 43
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	20 e2       	ldi	r18, 0x20	; 32
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	20 83       	st	Z, r18
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1da0:	8b e2       	ldi	r24, 0x2B	; 43
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	2b e2       	ldi	r18, 0x2B	; 43
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	f9 01       	movw	r30, r18
    1daa:	20 81       	ld	r18, Z
    1dac:	28 60       	ori	r18, 0x08	; 8
    1dae:	fc 01       	movw	r30, r24
    1db0:	20 83       	st	Z, r18
    1db2:	9e 01       	movw	r18, r28
    1db4:	27 5b       	subi	r18, 0xB7	; 183
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a0 e8       	ldi	r26, 0x80	; 128
    1dbe:	bf e3       	ldi	r27, 0x3F	; 63
    1dc0:	f9 01       	movw	r30, r18
    1dc2:	80 83       	st	Z, r24
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	a2 83       	std	Z+2, r26	; 0x02
    1dc8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	8e 01       	movw	r16, r28
    1dcc:	03 5b       	subi	r16, 0xB3	; 179
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	87 5b       	subi	r24, 0xB7	; 183
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	4a e7       	ldi	r20, 0x7A	; 122
    1de6:	53 e4       	ldi	r21, 0x43	; 67
    1de8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	f8 01       	movw	r30, r16
    1df2:	80 83       	st	Z, r24
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	a2 83       	std	Z+2, r26	; 0x02
    1df8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	83 5b       	subi	r24, 0xB3	; 179
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	11 e0       	ldi	r17, 0x01	; 1
    1e02:	fc 01       	movw	r30, r24
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	0c f0       	brlt	.+2      	; 0x1e1e <LCDinit+0x6b8>
    1e1c:	10 e0       	ldi	r17, 0x00	; 0
    1e1e:	11 23       	and	r17, r17
    1e20:	49 f0       	breq	.+18     	; 0x1e34 <LCDinit+0x6ce>
		__ticks = 1;
    1e22:	ce 01       	movw	r24, r28
    1e24:	8f 5a       	subi	r24, 0xAF	; 175
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	31 83       	std	Z+1, r19	; 0x01
    1e30:	20 83       	st	Z, r18
    1e32:	74 c0       	rjmp	.+232    	; 0x1f1c <LCDinit+0x7b6>
	else if (__tmp > 65535)
    1e34:	ce 01       	movw	r24, r28
    1e36:	83 5b       	subi	r24, 0xB3	; 179
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	11 e0       	ldi	r17, 0x01	; 1
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <LCDinit+0x6f2>
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	11 23       	and	r17, r17
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <LCDinit+0x6f8>
    1e5c:	4d c0       	rjmp	.+154    	; 0x1ef8 <LCDinit+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	ce 01       	movw	r24, r28
    1e60:	87 5b       	subi	r24, 0xB7	; 183
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	fc 01       	movw	r30, r24
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8e 01       	movw	r16, r28
    1e80:	0f 5a       	subi	r16, 0xAF	; 175
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	f8 01       	movw	r30, r16
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	80 83       	st	Z, r24
    1e96:	27 c0       	rjmp	.+78     	; 0x1ee6 <LCDinit+0x780>
    1e98:	ce 01       	movw	r24, r28
    1e9a:	8d 5a       	subi	r24, 0xAD	; 173
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	29 e1       	ldi	r18, 0x19	; 25
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	31 83       	std	Z+1, r19	; 0x01
    1ea6:	20 83       	st	Z, r18
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	8d 5a       	subi	r24, 0xAD	; 173
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	fc 01       	movw	r30, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <LCDinit+0x752>
    1ebc:	8c 01       	movw	r16, r24
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	8d 5a       	subi	r24, 0xAD	; 173
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	11 83       	std	Z+1, r17	; 0x01
    1ec8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	ce 01       	movw	r24, r28
    1ecc:	8f 5a       	subi	r24, 0xAF	; 175
    1ece:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed0:	9e 01       	movw	r18, r28
    1ed2:	2f 5a       	subi	r18, 0xAF	; 175
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	f9 01       	movw	r30, r18
    1ed8:	20 81       	ld	r18, Z
    1eda:	31 81       	ldd	r19, Z+1	; 0x01
    1edc:	21 50       	subi	r18, 0x01	; 1
    1ede:	30 40       	sbci	r19, 0x00	; 0
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	31 83       	std	Z+1, r19	; 0x01
    1ee4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	8f 5a       	subi	r24, 0xAF	; 175
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	fc 01       	movw	r30, r24
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	89 f6       	brne	.-94     	; 0x1e98 <LCDinit+0x732>
    1ef6:	2f c0       	rjmp	.+94     	; 0x1f56 <LCDinit+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	8e 01       	movw	r16, r28
    1efa:	0f 5a       	subi	r16, 0xAF	; 175
    1efc:	1f 4f       	sbci	r17, 0xFF	; 255
    1efe:	ce 01       	movw	r24, r28
    1f00:	83 5b       	subi	r24, 0xB3	; 179
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	fc 01       	movw	r30, r24
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	f8 01       	movw	r30, r16
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	8b 5a       	subi	r24, 0xAB	; 171
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	9e 01       	movw	r18, r28
    1f24:	2f 5a       	subi	r18, 0xAF	; 175
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	f9 01       	movw	r30, r18
    1f2a:	20 81       	ld	r18, Z
    1f2c:	31 81       	ldd	r19, Z+1	; 0x01
    1f2e:	fc 01       	movw	r30, r24
    1f30:	31 83       	std	Z+1, r19	; 0x01
    1f32:	20 83       	st	Z, r18
    1f34:	ce 01       	movw	r24, r28
    1f36:	8b 5a       	subi	r24, 0xAB	; 171
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	8c 01       	movw	r16, r24
    1f42:	c8 01       	movw	r24, r16
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCDinit+0x7de>
    1f48:	8c 01       	movw	r16, r24
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	8b 5a       	subi	r24, 0xAB	; 171
    1f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f50:	fc 01       	movw	r30, r24
    1f52:	11 83       	std	Z+1, r17	; 0x01
    1f54:	00 83       	st	Z, r16
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1f56:	8b e2       	ldi	r24, 0x2B	; 43
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	2b e2       	ldi	r18, 0x2B	; 43
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	f9 01       	movw	r30, r18
    1f60:	20 81       	ld	r18, Z
    1f62:	27 7f       	andi	r18, 0xF7	; 247
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 83       	st	Z, r18
    1f68:	9e 01       	movw	r18, r28
    1f6a:	29 5a       	subi	r18, 0xA9	; 169
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a0 e8       	ldi	r26, 0x80	; 128
    1f74:	bf e3       	ldi	r27, 0x3F	; 63
    1f76:	f9 01       	movw	r30, r18
    1f78:	80 83       	st	Z, r24
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	a2 83       	std	Z+2, r26	; 0x02
    1f7e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	8e 01       	movw	r16, r28
    1f82:	05 5a       	subi	r16, 0xA5	; 165
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	ce 01       	movw	r24, r28
    1f88:	89 5a       	subi	r24, 0xA9	; 169
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	53 e4       	ldi	r21, 0x43	; 67
    1f9e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	80 83       	st	Z, r24
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	a2 83       	std	Z+2, r26	; 0x02
    1fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	85 5a       	subi	r24, 0xA5	; 165
    1fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb6:	11 e0       	ldi	r17, 0x01	; 1
    1fb8:	fc 01       	movw	r30, r24
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 57 16 	call	0x2cae	; 0x2cae <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	0c f0       	brlt	.+2      	; 0x1fd4 <LCDinit+0x86e>
    1fd2:	10 e0       	ldi	r17, 0x00	; 0
    1fd4:	11 23       	and	r17, r17
    1fd6:	49 f0       	breq	.+18     	; 0x1fea <LCDinit+0x884>
		__ticks = 1;
    1fd8:	ce 01       	movw	r24, r28
    1fda:	81 5a       	subi	r24, 0xA1	; 161
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	21 e0       	ldi	r18, 0x01	; 1
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	31 83       	std	Z+1, r19	; 0x01
    1fe6:	20 83       	st	Z, r18
    1fe8:	74 c0       	rjmp	.+232    	; 0x20d2 <LCDinit+0x96c>
	else if (__tmp > 65535)
    1fea:	ce 01       	movw	r24, r28
    1fec:	85 5a       	subi	r24, 0xA5	; 165
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	11 e0       	ldi	r17, 0x01	; 1
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	0c f0       	brlt	.+2      	; 0x200e <LCDinit+0x8a8>
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	11 23       	and	r17, r17
    2010:	09 f4       	brne	.+2      	; 0x2014 <LCDinit+0x8ae>
    2012:	4d c0       	rjmp	.+154    	; 0x20ae <LCDinit+0x948>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	ce 01       	movw	r24, r28
    2016:	89 5a       	subi	r24, 0xA9	; 169
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	fc 01       	movw	r30, r24
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	8e 01       	movw	r16, r28
    2036:	01 5a       	subi	r16, 0xA1	; 161
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	f8 01       	movw	r30, r16
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
    204c:	27 c0       	rjmp	.+78     	; 0x209c <LCDinit+0x936>
    204e:	ce 01       	movw	r24, r28
    2050:	8f 59       	subi	r24, 0x9F	; 159
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	29 e1       	ldi	r18, 0x19	; 25
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	fc 01       	movw	r30, r24
    205a:	31 83       	std	Z+1, r19	; 0x01
    205c:	20 83       	st	Z, r18
    205e:	ce 01       	movw	r24, r28
    2060:	8f 59       	subi	r24, 0x9F	; 159
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	fc 01       	movw	r30, r24
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	8c 01       	movw	r16, r24
    206c:	c8 01       	movw	r24, r16
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCDinit+0x908>
    2072:	8c 01       	movw	r16, r24
    2074:	ce 01       	movw	r24, r28
    2076:	8f 59       	subi	r24, 0x9F	; 159
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	fc 01       	movw	r30, r24
    207c:	11 83       	std	Z+1, r17	; 0x01
    207e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	ce 01       	movw	r24, r28
    2082:	81 5a       	subi	r24, 0xA1	; 161
    2084:	9f 4f       	sbci	r25, 0xFF	; 255
    2086:	9e 01       	movw	r18, r28
    2088:	21 5a       	subi	r18, 0xA1	; 161
    208a:	3f 4f       	sbci	r19, 0xFF	; 255
    208c:	f9 01       	movw	r30, r18
    208e:	20 81       	ld	r18, Z
    2090:	31 81       	ldd	r19, Z+1	; 0x01
    2092:	21 50       	subi	r18, 0x01	; 1
    2094:	30 40       	sbci	r19, 0x00	; 0
    2096:	fc 01       	movw	r30, r24
    2098:	31 83       	std	Z+1, r19	; 0x01
    209a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	ce 01       	movw	r24, r28
    209e:	81 5a       	subi	r24, 0xA1	; 161
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	fc 01       	movw	r30, r24
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	89 f6       	brne	.-94     	; 0x204e <LCDinit+0x8e8>
    20ac:	2f c0       	rjmp	.+94     	; 0x210c <LCDinit+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	8e 01       	movw	r16, r28
    20b0:	01 5a       	subi	r16, 0xA1	; 161
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	ce 01       	movw	r24, r28
    20b6:	85 5a       	subi	r24, 0xA5	; 165
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	fc 01       	movw	r30, r24
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	0e 94 29 13 	call	0x2652	; 0x2652 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	f8 01       	movw	r30, r16
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	ce 01       	movw	r24, r28
    20d4:	8d 59       	subi	r24, 0x9D	; 157
    20d6:	9f 4f       	sbci	r25, 0xFF	; 255
    20d8:	9e 01       	movw	r18, r28
    20da:	21 5a       	subi	r18, 0xA1	; 161
    20dc:	3f 4f       	sbci	r19, 0xFF	; 255
    20de:	f9 01       	movw	r30, r18
    20e0:	20 81       	ld	r18, Z
    20e2:	31 81       	ldd	r19, Z+1	; 0x01
    20e4:	fc 01       	movw	r30, r24
    20e6:	31 83       	std	Z+1, r19	; 0x01
    20e8:	20 83       	st	Z, r18
    20ea:	ce 01       	movw	r24, r28
    20ec:	8d 59       	subi	r24, 0x9D	; 157
    20ee:	9f 4f       	sbci	r25, 0xFF	; 255
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	8c 01       	movw	r16, r24
    20f8:	c8 01       	movw	r24, r16
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCDinit+0x994>
    20fe:	8c 01       	movw	r16, r24
    2100:	ce 01       	movw	r24, r28
    2102:	8d 59       	subi	r24, 0x9D	; 157
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	fc 01       	movw	r30, r24
    2108:	11 83       	std	Z+1, r17	; 0x01
    210a:	00 83       	st	Z, r16
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    210c:	88 e2       	ldi	r24, 0x28	; 40
    210e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    2112:	8c e0       	ldi	r24, 0x0C	; 12
    2114:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    2118:	19 82       	std	Y+1, r1	; 0x01
    211a:	1a 82       	std	Y+2, r1	; 0x02
	while(ch<64)
    211c:	0f c0       	rjmp	.+30     	; 0x213c <LCDinit+0x9d6>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	88 59       	subi	r24, 0x98	; 152
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	2a 81       	ldd	r18, Y+2	; 0x02
    212a:	3a 81       	ldd	r19, Y+2	; 0x02
    212c:	3f 5f       	subi	r19, 0xFF	; 255
    212e:	3a 83       	std	Y+2, r19	; 0x02
    2130:	62 2f       	mov	r22, r18
    2132:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCDdefinechar>
		ch=ch+8;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	88 5f       	subi	r24, 0xF8	; 248
    213a:	89 83       	std	Y+1, r24	; 0x01
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	80 34       	cpi	r24, 0x40	; 64
    2140:	70 f3       	brcs	.-36     	; 0x211e <LCDinit+0x9b8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    2142:	cc 59       	subi	r28, 0x9C	; 156
    2144:	df 4f       	sbci	r29, 0xFF	; 255
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	08 95       	ret

0000215a <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
}
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <LCDstring>:
void LCDstring(char* data, uint8_t nBytes)	//Outputs string to LCD
{
    2182:	1f 93       	push	r17
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <LCDstring+0x8>
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	89 f0       	breq	.+34     	; 0x21c0 <LCDstring+0x3e>

	// print data
	for(i=0; i<nBytes; i++)
    219e:	10 e0       	ldi	r17, 0x00	; 0
    21a0:	0b c0       	rjmp	.+22     	; 0x21b8 <LCDstring+0x36>
	{
		LCDsendChar(data[i]);
    21a2:	81 2f       	mov	r24, r17
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	29 81       	ldd	r18, Y+1	; 0x01
    21a8:	3a 81       	ldd	r19, Y+2	; 0x02
    21aa:	82 0f       	add	r24, r18
    21ac:	93 1f       	adc	r25, r19
    21ae:	fc 01       	movw	r30, r24
    21b0:	80 81       	ld	r24, Z
    21b2:	0e 94 f1 06 	call	0xde2	; 0xde2 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    21b6:	1f 5f       	subi	r17, 0xFF	; 255
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	18 17       	cp	r17, r24
    21bc:	90 f3       	brcs	.-28     	; 0x21a2 <LCDstring+0x20>
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <LCDstring+0x40>
void LCDstring(char* data, uint8_t nBytes)	//Outputs string to LCD
{
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    21c0:	00 00       	nop
	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
	}
}
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	1f 91       	pop	r17
    21ce:	08 95       	ret

000021d0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    21d0:	1f 93       	push	r17
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <LCDGotoXY+0x8>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	79 f0       	breq	.+30     	; 0x220a <LCDGotoXY+0x3a>
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	91 05       	cpc	r25, r1
    21f0:	1c f4       	brge	.+6      	; 0x21f8 <LCDGotoXY+0x28>
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	41 f0       	breq	.+16     	; 0x2206 <LCDGotoXY+0x36>
    21f6:	15 c0       	rjmp	.+42     	; 0x2222 <LCDGotoXY+0x52>
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	91 05       	cpc	r25, r1
    21fc:	51 f0       	breq	.+20     	; 0x2212 <LCDGotoXY+0x42>
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	91 05       	cpc	r25, r1
    2202:	59 f0       	breq	.+22     	; 0x221a <LCDGotoXY+0x4a>
    2204:	0e c0       	rjmp	.+28     	; 0x2222 <LCDGotoXY+0x52>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    2206:	19 81       	ldd	r17, Y+1	; 0x01
    2208:	0d c0       	rjmp	.+26     	; 0x2224 <LCDGotoXY+0x54>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	18 2f       	mov	r17, r24
    220e:	10 5c       	subi	r17, 0xC0	; 192
    2210:	09 c0       	rjmp	.+18     	; 0x2224 <LCDGotoXY+0x54>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	18 2f       	mov	r17, r24
    2216:	1c 5e       	subi	r17, 0xEC	; 236
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <LCDGotoXY+0x54>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	18 2f       	mov	r17, r24
    221e:	1c 5a       	subi	r17, 0xAC	; 172
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <LCDGotoXY+0x54>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    2222:	19 81       	ldd	r17, Y+1	; 0x01
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    2224:	81 2f       	mov	r24, r17
    2226:	80 68       	ori	r24, 0x80	; 128
    2228:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
	
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	1f 91       	pop	r17
    2236:	08 95       	ret

00002238 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    2238:	1f 93       	push	r17
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	2b 97       	sbiw	r28, 0x0b	; 11
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	99 87       	std	Y+9, r25	; 0x09
    2250:	88 87       	std	Y+8, r24	; 0x08
    2252:	6a 87       	std	Y+10, r22	; 0x0a
    2254:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    2256:	8a 85       	ldd	r24, Y+10	; 0x0a
    2258:	6b 85       	ldd	r22, Y+11	; 0x0b
    225a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	14 c0       	rjmp	.+40     	; 0x228a <CopyStringtoLCD+0x52>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	28 85       	ldd	r18, Y+8	; 0x08
    226a:	39 85       	ldd	r19, Y+9	; 0x09
    226c:	82 0f       	add	r24, r18
    226e:	93 1f       	adc	r25, r19
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	fc 01       	movw	r30, r24
    227a:	14 91       	lpm	r17, Z+
    227c:	1f 83       	std	Y+7, r17	; 0x07
    227e:	8f 81       	ldd	r24, Y+7	; 0x07
    2280:	0e 94 f1 06 	call	0xde2	; 0xde2 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	28 85       	ldd	r18, Y+8	; 0x08
    2292:	39 85       	ldd	r19, Y+9	; 0x09
    2294:	82 0f       	add	r24, r18
    2296:	93 1f       	adc	r25, r19
    2298:	9b 83       	std	Y+3, r25	; 0x03
    229a:	8a 83       	std	Y+2, r24	; 0x02
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	fc 01       	movw	r30, r24
    22a2:	14 91       	lpm	r17, Z+
    22a4:	1c 83       	std	Y+4, r17	; 0x04
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	88 23       	and	r24, r24
    22aa:	d9 f6       	brne	.-74     	; 0x2262 <CopyStringtoLCD+0x2a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    22ac:	2b 96       	adiw	r28, 0x0b	; 11
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	1f 91       	pop	r17
    22be:	08 95       	ret

000022c0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    22c0:	1f 93       	push	r17
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	2a 97       	sbiw	r28, 0x0a	; 10
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	99 87       	std	Y+9, r25	; 0x09
    22d8:	88 87       	std	Y+8, r24	; 0x08
    22da:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    22dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	80 64       	ori	r24, 0x40	; 64
    22f0:	89 83       	std	Y+1, r24	; 0x01
	for (i=0; i<8; i++){
    22f2:	1b 82       	std	Y+3, r1	; 0x03
    22f4:	1a 82       	std	Y+2, r1	; 0x02
    22f6:	1d c0       	rjmp	.+58     	; 0x2332 <LCDdefinechar+0x72>
		pcc=pgm_read_byte(&pc[i]);
    22f8:	28 85       	ldd	r18, Y+8	; 0x08
    22fa:	39 85       	ldd	r19, Y+9	; 0x09
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2300:	82 0f       	add	r24, r18
    2302:	93 1f       	adc	r25, r19
    2304:	9d 83       	std	Y+5, r25	; 0x05
    2306:	8c 83       	std	Y+4, r24	; 0x04
    2308:	8c 81       	ldd	r24, Y+4	; 0x04
    230a:	9d 81       	ldd	r25, Y+5	; 0x05
    230c:	fc 01       	movw	r30, r24
    230e:	14 91       	lpm	r17, Z+
    2310:	1e 83       	std	Y+6, r17	; 0x06
    2312:	8e 81       	ldd	r24, Y+6	; 0x06
    2314:	8f 83       	std	Y+7, r24	; 0x07
		LCDsendCommand(a++);
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	99 81       	ldd	r25, Y+1	; 0x01
    231a:	9f 5f       	subi	r25, 0xFF	; 255
    231c:	99 83       	std	Y+1, r25	; 0x01
    231e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
		LCDsendChar(pcc);
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	0e 94 f1 06 	call	0xde2	; 0xde2 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	9b 83       	std	Y+3, r25	; 0x03
    2330:	8a 83       	std	Y+2, r24	; 0x02
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	9b 81       	ldd	r25, Y+3	; 0x03
    2336:	88 30       	cpi	r24, 0x08	; 8
    2338:	91 05       	cpc	r25, r1
    233a:	f0 f2       	brcs	.-68     	; 0x22f8 <LCDdefinechar+0x38>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    233c:	2a 96       	adiw	r28, 0x0a	; 10
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	1f 91       	pop	r17
    234e:	08 95       	ret

00002350 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <LCDshiftLeft+0x6>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i=0;i<n;i++)
    235c:	19 82       	std	Y+1, r1	; 0x01
    235e:	06 c0       	rjmp	.+12     	; 0x236c <LCDshiftLeft+0x1c>
	{
		LCDsendCommand(0x1E);
    2360:	8e e1       	ldi	r24, 0x1E	; 30
    2362:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	8f 5f       	subi	r24, 0xFF	; 255
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	99 81       	ldd	r25, Y+1	; 0x01
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	98 17       	cp	r25, r24
    2372:	b0 f3       	brcs	.-20     	; 0x2360 <LCDshiftLeft+0x10>
	{
		LCDsendCommand(0x1E);
	}
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	00 d0       	rcall	.+0      	; 0x2384 <LCDshiftRight+0x6>
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i=0;i<n;i++)
    238a:	19 82       	std	Y+1, r1	; 0x01
    238c:	06 c0       	rjmp	.+12     	; 0x239a <LCDshiftRight+0x1c>
	{
		LCDsendCommand(0x18);
    238e:	88 e1       	ldi	r24, 0x18	; 24
    2390:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	99 81       	ldd	r25, Y+1	; 0x01
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	98 17       	cp	r25, r24
    23a0:	b0 f3       	brcs	.-20     	; 0x238e <LCDshiftRight+0x10>
	{
		LCDsendCommand(0x18);
	}
}
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    23b4:	8e e0       	ldi	r24, 0x0E	; 14
    23b6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
}
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    23c8:	8f e0       	ldi	r24, 0x0F	; 15
    23ca:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
}
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    23dc:	8c e0       	ldi	r24, 0x0C	; 12
    23de:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
}
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    23f0:	88 e0       	ldi	r24, 0x08	; 8
    23f2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
}
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    2404:	8c e0       	ldi	r24, 0x0C	; 12
    2406:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <LCDcursorLeft+0x6>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i=0;i<n;i++)
    241c:	19 82       	std	Y+1, r1	; 0x01
    241e:	06 c0       	rjmp	.+12     	; 0x242c <LCDcursorLeft+0x1c>
	{
		LCDsendCommand(0x10);
    2420:	80 e1       	ldi	r24, 0x10	; 16
    2422:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	99 81       	ldd	r25, Y+1	; 0x01
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	98 17       	cp	r25, r24
    2432:	b0 f3       	brcs	.-20     	; 0x2420 <LCDcursorLeft+0x10>
	{
		LCDsendCommand(0x10);
	}
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <LCDcursorRight+0x6>
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i=0;i<n;i++)
    244a:	19 82       	std	Y+1, r1	; 0x01
    244c:	06 c0       	rjmp	.+12     	; 0x245a <LCDcursorRight+0x1c>
	{
		LCDsendCommand(0x14);
    244e:	84 e1       	ldi	r24, 0x14	; 20
    2450:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	8f 5f       	subi	r24, 0xFF	; 255
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	99 81       	ldd	r25, Y+1	; 0x01
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	98 17       	cp	r25, r24
    2460:	b0 f3       	brcs	.-20     	; 0x244e <LCDcursorRight+0x10>
	{
		LCDsendCommand(0x14);
	}
}
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	27 97       	sbiw	r28, 0x07	; 7
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	6e 83       	std	Y+6, r22	; 0x06
    2484:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	48 2f       	mov	r20, r24
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	8f 81       	ldd	r24, Y+7	; 0x07
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	c9 01       	movw	r24, r18
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	82 0f       	add	r24, r18
    249a:	93 1f       	adc	r25, r19
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	9c 01       	movw	r18, r24
    24a2:	42 9f       	mul	r20, r18
    24a4:	c0 01       	movw	r24, r0
    24a6:	43 9f       	mul	r20, r19
    24a8:	90 0d       	add	r25, r0
    24aa:	52 9f       	mul	r21, r18
    24ac:	90 0d       	add	r25, r0
    24ae:	11 24       	eor	r1, r1
    24b0:	2e 81       	ldd	r18, Y+6	; 0x06
    24b2:	22 2f       	mov	r18, r18
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	b9 01       	movw	r22, r18
    24b8:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__divmodhi4>
    24bc:	9b 01       	movw	r18, r22
    24be:	c9 01       	movw	r24, r18
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	8b 83       	std	Y+3, r24	; 0x03
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    24c4:	19 82       	std	Y+1, r1	; 0x01
    24c6:	35 c0       	rjmp	.+106    	; 0x2532 <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	c9 01       	movw	r24, r18
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	82 0f       	add	r24, r18
    24d6:	93 1f       	adc	r25, r19
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	9c 01       	movw	r18, r24
    24de:	2b 5f       	subi	r18, 0xFB	; 251
    24e0:	3f 4f       	sbci	r19, 0xFF	; 255
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	82 17       	cp	r24, r18
    24e8:	93 07       	cpc	r25, r19
    24ea:	d8 f4       	brcc	.+54     	; 0x2522 <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	c9 01       	movw	r24, r18
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	82 0f       	add	r24, r18
    24fa:	93 1f       	adc	r25, r19
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	9c 01       	movw	r18, r24
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	82 17       	cp	r24, r18
    2508:	93 07       	cpc	r25, r19
    250a:	10 f4       	brcc	.+4      	; 0x2510 <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    250c:	1a 82       	std	Y+2, r1	; 0x02
    250e:	0b c0       	rjmp	.+22     	; 0x2526 <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	26 e0       	ldi	r18, 0x06	; 6
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	b9 01       	movw	r22, r18
    251a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__udivmodhi4>
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    2522:	85 e0       	ldi	r24, 0x05	; 5
    2524:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		// write character to display
		LCDsendChar(c);
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	0e 94 f1 06 	call	0xde2	; 0xde2 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	99 81       	ldd	r25, Y+1	; 0x01
    2534:	8f 81       	ldd	r24, Y+7	; 0x07
    2536:	98 17       	cp	r25, r24
    2538:	38 f2       	brcs	.-114    	; 0x24c8 <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    253a:	27 96       	adiw	r28, 0x07	; 7
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <ADC_Init>:
	1338, 1353, 1369, 1385, 1402, 1420, 1439, 1459, 1480, 1502 };



void ADC_Init(void)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	cli();
    2554:	f8 94       	cli
	ADMUX = 0x40; // AREF = AVCC, ADC0
    2556:	8c e7       	ldi	r24, 0x7C	; 124
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	20 e4       	ldi	r18, 0x40	; 64
    255c:	fc 01       	movw	r30, r24
    255e:	20 83       	st	Z, r18
	ADCSRA = 0x86; // preddelitelj na 128 razreweno prerivanie rezhim razovij
    2560:	8a e7       	ldi	r24, 0x7A	; 122
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	26 e8       	ldi	r18, 0x86	; 134
    2566:	fc 01       	movw	r30, r24
    2568:	20 83       	st	Z, r18
	sei();
    256a:	78 94       	sei
}
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <ADC_Read>:

unsigned int ADC_Read(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= 0x40; // zapuskaem izmerenie
    257a:	8a e7       	ldi	r24, 0x7A	; 122
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	2a e7       	ldi	r18, 0x7A	; 122
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	f9 01       	movw	r30, r18
    2584:	20 81       	ld	r18, Z
    2586:	20 64       	ori	r18, 0x40	; 64
    2588:	fc 01       	movw	r30, r24
    258a:	20 83       	st	Z, r18
	while ((ADCSRA & 0x10)==0); //zhdem poka ne sbrositsja 4 bit ADIF
    258c:	00 00       	nop
    258e:	8a e7       	ldi	r24, 0x7A	; 122
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	fc 01       	movw	r30, r24
    2594:	80 81       	ld	r24, Z
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	80 71       	andi	r24, 0x10	; 16
    259c:	90 70       	andi	r25, 0x00	; 0
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	b1 f3       	breq	.-20     	; 0x258e <ADC_Read+0x1c>
	ADCSRA|= 0x10; // vistavljaem flag prerivanija na mesto
    25a2:	8a e7       	ldi	r24, 0x7A	; 122
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	2a e7       	ldi	r18, 0x7A	; 122
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	f9 01       	movw	r30, r18
    25ac:	20 81       	ld	r18, Z
    25ae:	20 61       	ori	r18, 0x10	; 16
    25b0:	fc 01       	movw	r30, r24
    25b2:	20 83       	st	Z, r18
	return ADCW; // vozvrawaem zna4enie
    25b4:	88 e7       	ldi	r24, 0x78	; 120
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	fc 01       	movw	r30, r24
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
}
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <Term>:

unsigned int Term(void)
{
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <Term+0xe>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <Term+0x10>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <Term+0x12>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	unsigned int therm;
	therm = ADC_Read() - 238; // izmerenija idut ot 0 gradusov poetomu nuzhno smewenie 238
    25da:	0e 94 b9 12 	call	0x2572	; 0x2572 <ADC_Read>
    25de:	8e 5e       	subi	r24, 0xEE	; 238
    25e0:	90 40       	sbci	r25, 0x00	; 0
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
	therm = pgm_read_word(&(temps[therm])); // vozvrawaem dannie v graduah celjsija vitjanutie iz tablici
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	88 55       	subi	r24, 0x58	; 88
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	9c 83       	std	Y+4, r25	; 0x04
    25f4:	8b 83       	std	Y+3, r24	; 0x03
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	8c 01       	movw	r16, r24
    25fc:	f8 01       	movw	r30, r16
    25fe:	e5 90       	lpm	r14, Z+
    2600:	f4 90       	lpm	r15, Z+
    2602:	8f 01       	movw	r16, r30
    2604:	fe 82       	std	Y+6, r15	; 0x06
    2606:	ed 82       	std	Y+5, r14	; 0x05
    2608:	1c 83       	std	Y+4, r17	; 0x04
    260a:	0b 83       	std	Y+3, r16	; 0x03
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
	return therm;
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2618:	26 96       	adiw	r28, 0x06	; 6
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	08 95       	ret

00002632 <__vector_21>:

ISR(ADC_vect)
{
    2632:	1f 92       	push	r1
    2634:	0f 92       	push	r0
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	0f 92       	push	r0
    263a:	11 24       	eor	r1, r1
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	//dolzhen bitj v ljubom slu4ae hotj pustim ina4e na4inaet begatj po sosednim vektoram
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	0f 90       	pop	r0
    264e:	1f 90       	pop	r1
    2650:	18 95       	reti

00002652 <__fixunssfsi>:
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	7b 01       	movw	r14, r22
    265c:	8c 01       	movw	r16, r24
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	5f e4       	ldi	r21, 0x4F	; 79
    2666:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__gesf2>
    266a:	87 fd       	sbrc	r24, 7
    266c:	11 c0       	rjmp	.+34     	; 0x2690 <__fixunssfsi+0x3e>
    266e:	c8 01       	movw	r24, r16
    2670:	b7 01       	movw	r22, r14
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	5f e4       	ldi	r21, 0x4F	; 79
    267a:	0e 94 cc 14 	call	0x2998	; 0x2998 <__subsf3>
    267e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    2682:	9b 01       	movw	r18, r22
    2684:	ac 01       	movw	r20, r24
    2686:	20 50       	subi	r18, 0x00	; 0
    2688:	30 40       	sbci	r19, 0x00	; 0
    268a:	40 40       	sbci	r20, 0x00	; 0
    268c:	50 48       	sbci	r21, 0x80	; 128
    268e:	06 c0       	rjmp	.+12     	; 0x269c <__fixunssfsi+0x4a>
    2690:	c8 01       	movw	r24, r16
    2692:	b7 01       	movw	r22, r14
    2694:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fixsfsi>
    2698:	9b 01       	movw	r18, r22
    269a:	ac 01       	movw	r20, r24
    269c:	b9 01       	movw	r22, r18
    269e:	ca 01       	movw	r24, r20
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	08 95       	ret

000026aa <_fpadd_parts>:
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	eb e5       	ldi	r30, 0x5B	; 91
    26b0:	f3 e1       	ldi	r31, 0x13	; 19
    26b2:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x8>
    26b6:	fc 01       	movw	r30, r24
    26b8:	ea 01       	movw	r28, r20
    26ba:	80 81       	ld	r24, Z
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	08 f4       	brcc	.+2      	; 0x26c2 <_fpadd_parts+0x18>
    26c0:	38 c1       	rjmp	.+624    	; 0x2932 <_fpadd_parts+0x288>
    26c2:	db 01       	movw	r26, r22
    26c4:	9c 91       	ld	r25, X
    26c6:	92 30       	cpi	r25, 0x02	; 2
    26c8:	08 f4       	brcc	.+2      	; 0x26cc <_fpadd_parts+0x22>
    26ca:	30 c1       	rjmp	.+608    	; 0x292c <_fpadd_parts+0x282>
    26cc:	84 30       	cpi	r24, 0x04	; 4
    26ce:	59 f4       	brne	.+22     	; 0x26e6 <_fpadd_parts+0x3c>
    26d0:	94 30       	cpi	r25, 0x04	; 4
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <_fpadd_parts+0x2c>
    26d4:	2e c1       	rjmp	.+604    	; 0x2932 <_fpadd_parts+0x288>
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	8c 91       	ld	r24, X
    26dc:	11 97       	sbiw	r26, 0x01	; 1
    26de:	98 17       	cp	r25, r24
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <_fpadd_parts+0x3a>
    26e2:	21 c1       	rjmp	.+578    	; 0x2926 <_fpadd_parts+0x27c>
    26e4:	26 c1       	rjmp	.+588    	; 0x2932 <_fpadd_parts+0x288>
    26e6:	94 30       	cpi	r25, 0x04	; 4
    26e8:	09 f4       	brne	.+2      	; 0x26ec <_fpadd_parts+0x42>
    26ea:	20 c1       	rjmp	.+576    	; 0x292c <_fpadd_parts+0x282>
    26ec:	92 30       	cpi	r25, 0x02	; 2
    26ee:	b1 f4       	brne	.+44     	; 0x271c <_fpadd_parts+0x72>
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <_fpadd_parts+0x4c>
    26f4:	1e c1       	rjmp	.+572    	; 0x2932 <_fpadd_parts+0x288>
    26f6:	ca 01       	movw	r24, r20
    26f8:	af 01       	movw	r20, r30
    26fa:	28 e0       	ldi	r18, 0x08	; 8
    26fc:	da 01       	movw	r26, r20
    26fe:	0d 90       	ld	r0, X+
    2700:	ad 01       	movw	r20, r26
    2702:	dc 01       	movw	r26, r24
    2704:	0d 92       	st	X+, r0
    2706:	cd 01       	movw	r24, r26
    2708:	21 50       	subi	r18, 0x01	; 1
    270a:	c1 f7       	brne	.-16     	; 0x26fc <_fpadd_parts+0x52>
    270c:	db 01       	movw	r26, r22
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	8c 91       	ld	r24, X
    2712:	11 97       	sbiw	r26, 0x01	; 1
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	89 23       	and	r24, r25
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	0a c1       	rjmp	.+532    	; 0x2930 <_fpadd_parts+0x286>
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	09 f4       	brne	.+2      	; 0x2722 <_fpadd_parts+0x78>
    2720:	05 c1       	rjmp	.+522    	; 0x292c <_fpadd_parts+0x282>
    2722:	c2 80       	ldd	r12, Z+2	; 0x02
    2724:	d3 80       	ldd	r13, Z+3	; 0x03
    2726:	db 01       	movw	r26, r22
    2728:	12 96       	adiw	r26, 0x02	; 2
    272a:	6d 90       	ld	r6, X+
    272c:	7c 90       	ld	r7, X
    272e:	13 97       	sbiw	r26, 0x03	; 3
    2730:	24 81       	ldd	r18, Z+4	; 0x04
    2732:	35 81       	ldd	r19, Z+5	; 0x05
    2734:	46 81       	ldd	r20, Z+6	; 0x06
    2736:	57 81       	ldd	r21, Z+7	; 0x07
    2738:	14 96       	adiw	r26, 0x04	; 4
    273a:	ed 90       	ld	r14, X+
    273c:	fd 90       	ld	r15, X+
    273e:	0d 91       	ld	r16, X+
    2740:	1c 91       	ld	r17, X
    2742:	17 97       	sbiw	r26, 0x07	; 7
    2744:	c6 01       	movw	r24, r12
    2746:	86 19       	sub	r24, r6
    2748:	97 09       	sbc	r25, r7
    274a:	5c 01       	movw	r10, r24
    274c:	97 ff       	sbrs	r25, 7
    274e:	04 c0       	rjmp	.+8      	; 0x2758 <_fpadd_parts+0xae>
    2750:	aa 24       	eor	r10, r10
    2752:	bb 24       	eor	r11, r11
    2754:	a8 1a       	sub	r10, r24
    2756:	b9 0a       	sbc	r11, r25
    2758:	b0 e2       	ldi	r27, 0x20	; 32
    275a:	ab 16       	cp	r10, r27
    275c:	b1 04       	cpc	r11, r1
    275e:	0c f0       	brlt	.+2      	; 0x2762 <_fpadd_parts+0xb8>
    2760:	61 c0       	rjmp	.+194    	; 0x2824 <_fpadd_parts+0x17a>
    2762:	18 16       	cp	r1, r24
    2764:	19 06       	cpc	r1, r25
    2766:	6c f5       	brge	.+90     	; 0x27c2 <_fpadd_parts+0x118>
    2768:	37 01       	movw	r6, r14
    276a:	48 01       	movw	r8, r16
    276c:	0a 2c       	mov	r0, r10
    276e:	04 c0       	rjmp	.+8      	; 0x2778 <_fpadd_parts+0xce>
    2770:	96 94       	lsr	r9
    2772:	87 94       	ror	r8
    2774:	77 94       	ror	r7
    2776:	67 94       	ror	r6
    2778:	0a 94       	dec	r0
    277a:	d2 f7       	brpl	.-12     	; 0x2770 <_fpadd_parts+0xc6>
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 e0       	ldi	r26, 0x00	; 0
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	0a 2c       	mov	r0, r10
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <_fpadd_parts+0xe6>
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	aa 1f       	adc	r26, r26
    278e:	bb 1f       	adc	r27, r27
    2790:	0a 94       	dec	r0
    2792:	d2 f7       	brpl	.-12     	; 0x2788 <_fpadd_parts+0xde>
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	a1 09       	sbc	r26, r1
    2798:	b1 09       	sbc	r27, r1
    279a:	8e 21       	and	r24, r14
    279c:	9f 21       	and	r25, r15
    279e:	a0 23       	and	r26, r16
    27a0:	b1 23       	and	r27, r17
    27a2:	ee 24       	eor	r14, r14
    27a4:	ff 24       	eor	r15, r15
    27a6:	87 01       	movw	r16, r14
    27a8:	e3 94       	inc	r14
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	a1 05       	cpc	r26, r1
    27ae:	b1 05       	cpc	r27, r1
    27b0:	19 f4       	brne	.+6      	; 0x27b8 <_fpadd_parts+0x10e>
    27b2:	ee 24       	eor	r14, r14
    27b4:	ff 24       	eor	r15, r15
    27b6:	87 01       	movw	r16, r14
    27b8:	e6 28       	or	r14, r6
    27ba:	f7 28       	or	r15, r7
    27bc:	08 29       	or	r16, r8
    27be:	19 29       	or	r17, r9
    27c0:	3c c0       	rjmp	.+120    	; 0x283a <_fpadd_parts+0x190>
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	d1 f1       	breq	.+116    	; 0x283a <_fpadd_parts+0x190>
    27c6:	ca 0c       	add	r12, r10
    27c8:	db 1c       	adc	r13, r11
    27ca:	39 01       	movw	r6, r18
    27cc:	4a 01       	movw	r8, r20
    27ce:	0a 2c       	mov	r0, r10
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <_fpadd_parts+0x130>
    27d2:	96 94       	lsr	r9
    27d4:	87 94       	ror	r8
    27d6:	77 94       	ror	r7
    27d8:	67 94       	ror	r6
    27da:	0a 94       	dec	r0
    27dc:	d2 f7       	brpl	.-12     	; 0x27d2 <_fpadd_parts+0x128>
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e0       	ldi	r26, 0x00	; 0
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	0a 2c       	mov	r0, r10
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <_fpadd_parts+0x148>
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	aa 1f       	adc	r26, r26
    27f0:	bb 1f       	adc	r27, r27
    27f2:	0a 94       	dec	r0
    27f4:	d2 f7       	brpl	.-12     	; 0x27ea <_fpadd_parts+0x140>
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	a1 09       	sbc	r26, r1
    27fa:	b1 09       	sbc	r27, r1
    27fc:	82 23       	and	r24, r18
    27fe:	93 23       	and	r25, r19
    2800:	a4 23       	and	r26, r20
    2802:	b5 23       	and	r27, r21
    2804:	21 e0       	ldi	r18, 0x01	; 1
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	a1 05       	cpc	r26, r1
    2810:	b1 05       	cpc	r27, r1
    2812:	19 f4       	brne	.+6      	; 0x281a <_fpadd_parts+0x170>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	a9 01       	movw	r20, r18
    281a:	26 29       	or	r18, r6
    281c:	37 29       	or	r19, r7
    281e:	48 29       	or	r20, r8
    2820:	59 29       	or	r21, r9
    2822:	0b c0       	rjmp	.+22     	; 0x283a <_fpadd_parts+0x190>
    2824:	6c 14       	cp	r6, r12
    2826:	7d 04       	cpc	r7, r13
    2828:	24 f4       	brge	.+8      	; 0x2832 <_fpadd_parts+0x188>
    282a:	ee 24       	eor	r14, r14
    282c:	ff 24       	eor	r15, r15
    282e:	87 01       	movw	r16, r14
    2830:	04 c0       	rjmp	.+8      	; 0x283a <_fpadd_parts+0x190>
    2832:	63 01       	movw	r12, r6
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	a9 01       	movw	r20, r18
    283a:	81 81       	ldd	r24, Z+1	; 0x01
    283c:	fb 01       	movw	r30, r22
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	89 17       	cp	r24, r25
    2842:	09 f4       	brne	.+2      	; 0x2846 <_fpadd_parts+0x19c>
    2844:	45 c0       	rjmp	.+138    	; 0x28d0 <_fpadd_parts+0x226>
    2846:	88 23       	and	r24, r24
    2848:	49 f0       	breq	.+18     	; 0x285c <_fpadd_parts+0x1b2>
    284a:	d8 01       	movw	r26, r16
    284c:	c7 01       	movw	r24, r14
    284e:	82 1b       	sub	r24, r18
    2850:	93 0b       	sbc	r25, r19
    2852:	a4 0b       	sbc	r26, r20
    2854:	b5 0b       	sbc	r27, r21
    2856:	9c 01       	movw	r18, r24
    2858:	ad 01       	movw	r20, r26
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <_fpadd_parts+0x1ba>
    285c:	2e 19       	sub	r18, r14
    285e:	3f 09       	sbc	r19, r15
    2860:	40 0b       	sbc	r20, r16
    2862:	51 0b       	sbc	r21, r17
    2864:	57 fd       	sbrc	r21, 7
    2866:	04 c0       	rjmp	.+8      	; 0x2870 <_fpadd_parts+0x1c6>
    2868:	19 82       	std	Y+1, r1	; 0x01
    286a:	db 82       	std	Y+3, r13	; 0x03
    286c:	ca 82       	std	Y+2, r12	; 0x02
    286e:	0b c0       	rjmp	.+22     	; 0x2886 <_fpadd_parts+0x1dc>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	89 83       	std	Y+1, r24	; 0x01
    2874:	db 82       	std	Y+3, r13	; 0x03
    2876:	ca 82       	std	Y+2, r12	; 0x02
    2878:	50 95       	com	r21
    287a:	40 95       	com	r20
    287c:	30 95       	com	r19
    287e:	21 95       	neg	r18
    2880:	3f 4f       	sbci	r19, 0xFF	; 255
    2882:	4f 4f       	sbci	r20, 0xFF	; 255
    2884:	5f 4f       	sbci	r21, 0xFF	; 255
    2886:	2c 83       	std	Y+4, r18	; 0x04
    2888:	3d 83       	std	Y+5, r19	; 0x05
    288a:	4e 83       	std	Y+6, r20	; 0x06
    288c:	5f 83       	std	Y+7, r21	; 0x07
    288e:	0d c0       	rjmp	.+26     	; 0x28aa <_fpadd_parts+0x200>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	8c 83       	std	Y+4, r24	; 0x04
    289a:	9d 83       	std	Y+5, r25	; 0x05
    289c:	ae 83       	std	Y+6, r26	; 0x06
    289e:	bf 83       	std	Y+7, r27	; 0x07
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9b 83       	std	Y+3, r25	; 0x03
    28a8:	8a 83       	std	Y+2, r24	; 0x02
    28aa:	8c 81       	ldd	r24, Y+4	; 0x04
    28ac:	9d 81       	ldd	r25, Y+5	; 0x05
    28ae:	ae 81       	ldd	r26, Y+6	; 0x06
    28b0:	bf 81       	ldd	r27, Y+7	; 0x07
    28b2:	9c 01       	movw	r18, r24
    28b4:	ad 01       	movw	r20, r26
    28b6:	21 50       	subi	r18, 0x01	; 1
    28b8:	30 40       	sbci	r19, 0x00	; 0
    28ba:	40 40       	sbci	r20, 0x00	; 0
    28bc:	50 40       	sbci	r21, 0x00	; 0
    28be:	2f 3f       	cpi	r18, 0xFF	; 255
    28c0:	ef ef       	ldi	r30, 0xFF	; 255
    28c2:	3e 07       	cpc	r19, r30
    28c4:	ef ef       	ldi	r30, 0xFF	; 255
    28c6:	4e 07       	cpc	r20, r30
    28c8:	ef e3       	ldi	r30, 0x3F	; 63
    28ca:	5e 07       	cpc	r21, r30
    28cc:	08 f3       	brcs	.-62     	; 0x2890 <_fpadd_parts+0x1e6>
    28ce:	0b c0       	rjmp	.+22     	; 0x28e6 <_fpadd_parts+0x23c>
    28d0:	89 83       	std	Y+1, r24	; 0x01
    28d2:	db 82       	std	Y+3, r13	; 0x03
    28d4:	ca 82       	std	Y+2, r12	; 0x02
    28d6:	2e 0d       	add	r18, r14
    28d8:	3f 1d       	adc	r19, r15
    28da:	40 1f       	adc	r20, r16
    28dc:	51 1f       	adc	r21, r17
    28de:	2c 83       	std	Y+4, r18	; 0x04
    28e0:	3d 83       	std	Y+5, r19	; 0x05
    28e2:	4e 83       	std	Y+6, r20	; 0x06
    28e4:	5f 83       	std	Y+7, r21	; 0x07
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	88 83       	st	Y, r24
    28ea:	2c 81       	ldd	r18, Y+4	; 0x04
    28ec:	3d 81       	ldd	r19, Y+5	; 0x05
    28ee:	4e 81       	ldd	r20, Y+6	; 0x06
    28f0:	5f 81       	ldd	r21, Y+7	; 0x07
    28f2:	57 ff       	sbrs	r21, 7
    28f4:	1d c0       	rjmp	.+58     	; 0x2930 <_fpadd_parts+0x286>
    28f6:	da 01       	movw	r26, r20
    28f8:	c9 01       	movw	r24, r18
    28fa:	81 70       	andi	r24, 0x01	; 1
    28fc:	90 70       	andi	r25, 0x00	; 0
    28fe:	a0 70       	andi	r26, 0x00	; 0
    2900:	b0 70       	andi	r27, 0x00	; 0
    2902:	56 95       	lsr	r21
    2904:	47 95       	ror	r20
    2906:	37 95       	ror	r19
    2908:	27 95       	ror	r18
    290a:	82 2b       	or	r24, r18
    290c:	93 2b       	or	r25, r19
    290e:	a4 2b       	or	r26, r20
    2910:	b5 2b       	or	r27, r21
    2912:	8c 83       	std	Y+4, r24	; 0x04
    2914:	9d 83       	std	Y+5, r25	; 0x05
    2916:	ae 83       	std	Y+6, r26	; 0x06
    2918:	bf 83       	std	Y+7, r27	; 0x07
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	9b 83       	std	Y+3, r25	; 0x03
    2922:	8a 83       	std	Y+2, r24	; 0x02
    2924:	05 c0       	rjmp	.+10     	; 0x2930 <_fpadd_parts+0x286>
    2926:	e4 e1       	ldi	r30, 0x14	; 20
    2928:	f1 e0       	ldi	r31, 0x01	; 1
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <_fpadd_parts+0x288>
    292c:	fb 01       	movw	r30, r22
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <_fpadd_parts+0x288>
    2930:	fe 01       	movw	r30, r28
    2932:	cf 01       	movw	r24, r30
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	ee e0       	ldi	r30, 0x0E	; 14
    293a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x8>

0000293e <__addsf3>:
    293e:	a0 e2       	ldi	r26, 0x20	; 32
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e5 ea       	ldi	r30, 0xA5	; 165
    2944:	f4 e1       	ldi	r31, 0x14	; 20
    2946:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__prologue_saves__+0x18>
    294a:	69 83       	std	Y+1, r22	; 0x01
    294c:	7a 83       	std	Y+2, r23	; 0x02
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	9c 83       	std	Y+4, r25	; 0x04
    2952:	2d 83       	std	Y+5, r18	; 0x05
    2954:	3e 83       	std	Y+6, r19	; 0x06
    2956:	4f 83       	std	Y+7, r20	; 0x07
    2958:	58 87       	std	Y+8, r21	; 0x08
    295a:	89 e0       	ldi	r24, 0x09	; 9
    295c:	e8 2e       	mov	r14, r24
    295e:	f1 2c       	mov	r15, r1
    2960:	ec 0e       	add	r14, r28
    2962:	fd 1e       	adc	r15, r29
    2964:	ce 01       	movw	r24, r28
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	b7 01       	movw	r22, r14
    296a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    296e:	8e 01       	movw	r16, r28
    2970:	0f 5e       	subi	r16, 0xEF	; 239
    2972:	1f 4f       	sbci	r17, 0xFF	; 255
    2974:	ce 01       	movw	r24, r28
    2976:	05 96       	adiw	r24, 0x05	; 5
    2978:	b8 01       	movw	r22, r16
    297a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    297e:	c7 01       	movw	r24, r14
    2980:	b8 01       	movw	r22, r16
    2982:	ae 01       	movw	r20, r28
    2984:	47 5e       	subi	r20, 0xE7	; 231
    2986:	5f 4f       	sbci	r21, 0xFF	; 255
    2988:	0e 94 55 13 	call	0x26aa	; 0x26aa <_fpadd_parts>
    298c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__pack_f>
    2990:	a0 96       	adiw	r28, 0x20	; 32
    2992:	e6 e0       	ldi	r30, 0x06	; 6
    2994:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__epilogue_restores__+0x18>

00002998 <__subsf3>:
    2998:	a0 e2       	ldi	r26, 0x20	; 32
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e2 ed       	ldi	r30, 0xD2	; 210
    299e:	f4 e1       	ldi	r31, 0x14	; 20
    29a0:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__prologue_saves__+0x18>
    29a4:	69 83       	std	Y+1, r22	; 0x01
    29a6:	7a 83       	std	Y+2, r23	; 0x02
    29a8:	8b 83       	std	Y+3, r24	; 0x03
    29aa:	9c 83       	std	Y+4, r25	; 0x04
    29ac:	2d 83       	std	Y+5, r18	; 0x05
    29ae:	3e 83       	std	Y+6, r19	; 0x06
    29b0:	4f 83       	std	Y+7, r20	; 0x07
    29b2:	58 87       	std	Y+8, r21	; 0x08
    29b4:	8e 01       	movw	r16, r28
    29b6:	07 5f       	subi	r16, 0xF7	; 247
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	ce 01       	movw	r24, r28
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	b8 01       	movw	r22, r16
    29c0:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    29c4:	91 e1       	ldi	r25, 0x11	; 17
    29c6:	e9 2e       	mov	r14, r25
    29c8:	f1 2c       	mov	r15, r1
    29ca:	ec 0e       	add	r14, r28
    29cc:	fd 1e       	adc	r15, r29
    29ce:	ce 01       	movw	r24, r28
    29d0:	05 96       	adiw	r24, 0x05	; 5
    29d2:	b7 01       	movw	r22, r14
    29d4:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    29d8:	8a 89       	ldd	r24, Y+18	; 0x12
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	89 27       	eor	r24, r25
    29de:	8a 8b       	std	Y+18, r24	; 0x12
    29e0:	c8 01       	movw	r24, r16
    29e2:	b7 01       	movw	r22, r14
    29e4:	ae 01       	movw	r20, r28
    29e6:	47 5e       	subi	r20, 0xE7	; 231
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ea:	0e 94 55 13 	call	0x26aa	; 0x26aa <_fpadd_parts>
    29ee:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__pack_f>
    29f2:	a0 96       	adiw	r28, 0x20	; 32
    29f4:	e6 e0       	ldi	r30, 0x06	; 6
    29f6:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__epilogue_restores__+0x18>

000029fa <__mulsf3>:
    29fa:	a0 e2       	ldi	r26, 0x20	; 32
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e3 e0       	ldi	r30, 0x03	; 3
    2a00:	f5 e1       	ldi	r31, 0x15	; 21
    2a02:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__>
    2a06:	69 83       	std	Y+1, r22	; 0x01
    2a08:	7a 83       	std	Y+2, r23	; 0x02
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	2d 83       	std	Y+5, r18	; 0x05
    2a10:	3e 83       	std	Y+6, r19	; 0x06
    2a12:	4f 83       	std	Y+7, r20	; 0x07
    2a14:	58 87       	std	Y+8, r21	; 0x08
    2a16:	ce 01       	movw	r24, r28
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	be 01       	movw	r22, r28
    2a1c:	67 5f       	subi	r22, 0xF7	; 247
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2a24:	ce 01       	movw	r24, r28
    2a26:	05 96       	adiw	r24, 0x05	; 5
    2a28:	be 01       	movw	r22, r28
    2a2a:	6f 5e       	subi	r22, 0xEF	; 239
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2a32:	99 85       	ldd	r25, Y+9	; 0x09
    2a34:	92 30       	cpi	r25, 0x02	; 2
    2a36:	78 f0       	brcs	.+30     	; 0x2a56 <__mulsf3+0x5c>
    2a38:	89 89       	ldd	r24, Y+17	; 0x11
    2a3a:	82 30       	cpi	r24, 0x02	; 2
    2a3c:	c0 f0       	brcs	.+48     	; 0x2a6e <__mulsf3+0x74>
    2a3e:	94 30       	cpi	r25, 0x04	; 4
    2a40:	19 f4       	brne	.+6      	; 0x2a48 <__mulsf3+0x4e>
    2a42:	82 30       	cpi	r24, 0x02	; 2
    2a44:	41 f4       	brne	.+16     	; 0x2a56 <__mulsf3+0x5c>
    2a46:	cb c0       	rjmp	.+406    	; 0x2bde <__mulsf3+0x1e4>
    2a48:	84 30       	cpi	r24, 0x04	; 4
    2a4a:	19 f4       	brne	.+6      	; 0x2a52 <__mulsf3+0x58>
    2a4c:	92 30       	cpi	r25, 0x02	; 2
    2a4e:	79 f4       	brne	.+30     	; 0x2a6e <__mulsf3+0x74>
    2a50:	c6 c0       	rjmp	.+396    	; 0x2bde <__mulsf3+0x1e4>
    2a52:	92 30       	cpi	r25, 0x02	; 2
    2a54:	51 f4       	brne	.+20     	; 0x2a6a <__mulsf3+0x70>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a5c:	29 17       	cp	r18, r25
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <__mulsf3+0x68>
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	8a 87       	std	Y+10, r24	; 0x0a
    2a64:	ce 01       	movw	r24, r28
    2a66:	09 96       	adiw	r24, 0x09	; 9
    2a68:	bc c0       	rjmp	.+376    	; 0x2be2 <__mulsf3+0x1e8>
    2a6a:	82 30       	cpi	r24, 0x02	; 2
    2a6c:	51 f4       	brne	.+20     	; 0x2a82 <__mulsf3+0x88>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a72:	9a 89       	ldd	r25, Y+18	; 0x12
    2a74:	29 17       	cp	r18, r25
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <__mulsf3+0x80>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	8a 8b       	std	Y+18, r24	; 0x12
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	41 96       	adiw	r24, 0x11	; 17
    2a80:	b0 c0       	rjmp	.+352    	; 0x2be2 <__mulsf3+0x1e8>
    2a82:	6d 84       	ldd	r6, Y+13	; 0x0d
    2a84:	7e 84       	ldd	r7, Y+14	; 0x0e
    2a86:	8f 84       	ldd	r8, Y+15	; 0x0f
    2a88:	98 88       	ldd	r9, Y+16	; 0x10
    2a8a:	ed 88       	ldd	r14, Y+21	; 0x15
    2a8c:	fe 88       	ldd	r15, Y+22	; 0x16
    2a8e:	0f 89       	ldd	r16, Y+23	; 0x17
    2a90:	18 8d       	ldd	r17, Y+24	; 0x18
    2a92:	e0 e2       	ldi	r30, 0x20	; 32
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	aa 24       	eor	r10, r10
    2a9e:	bb 24       	eor	r11, r11
    2aa0:	65 01       	movw	r12, r10
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	a9 01       	movw	r20, r18
    2aa8:	b3 01       	movw	r22, r6
    2aaa:	61 70       	andi	r22, 0x01	; 1
    2aac:	70 70       	andi	r23, 0x00	; 0
    2aae:	61 15       	cp	r22, r1
    2ab0:	71 05       	cpc	r23, r1
    2ab2:	d1 f0       	breq	.+52     	; 0x2ae8 <__mulsf3+0xee>
    2ab4:	2e 0d       	add	r18, r14
    2ab6:	3f 1d       	adc	r19, r15
    2ab8:	40 1f       	adc	r20, r16
    2aba:	51 1f       	adc	r21, r17
    2abc:	15 01       	movw	r2, r10
    2abe:	26 01       	movw	r4, r12
    2ac0:	28 0e       	add	r2, r24
    2ac2:	39 1e       	adc	r3, r25
    2ac4:	4a 1e       	adc	r4, r26
    2ac6:	5b 1e       	adc	r5, r27
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	2e 15       	cp	r18, r14
    2ad2:	3f 05       	cpc	r19, r15
    2ad4:	40 07       	cpc	r20, r16
    2ad6:	51 07       	cpc	r21, r17
    2ad8:	18 f0       	brcs	.+6      	; 0x2ae0 <__mulsf3+0xe6>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	dc 01       	movw	r26, r24
    2ae0:	82 0d       	add	r24, r2
    2ae2:	93 1d       	adc	r25, r3
    2ae4:	a4 1d       	adc	r26, r4
    2ae6:	b5 1d       	adc	r27, r5
    2ae8:	aa 0c       	add	r10, r10
    2aea:	bb 1c       	adc	r11, r11
    2aec:	cc 1c       	adc	r12, r12
    2aee:	dd 1c       	adc	r13, r13
    2af0:	17 ff       	sbrs	r17, 7
    2af2:	09 c0       	rjmp	.+18     	; 0x2b06 <__mulsf3+0x10c>
    2af4:	61 e0       	ldi	r22, 0x01	; 1
    2af6:	26 2e       	mov	r2, r22
    2af8:	31 2c       	mov	r3, r1
    2afa:	41 2c       	mov	r4, r1
    2afc:	51 2c       	mov	r5, r1
    2afe:	a2 28       	or	r10, r2
    2b00:	b3 28       	or	r11, r3
    2b02:	c4 28       	or	r12, r4
    2b04:	d5 28       	or	r13, r5
    2b06:	31 97       	sbiw	r30, 0x01	; 1
    2b08:	49 f0       	breq	.+18     	; 0x2b1c <__mulsf3+0x122>
    2b0a:	ee 0c       	add	r14, r14
    2b0c:	ff 1c       	adc	r15, r15
    2b0e:	00 1f       	adc	r16, r16
    2b10:	11 1f       	adc	r17, r17
    2b12:	96 94       	lsr	r9
    2b14:	87 94       	ror	r8
    2b16:	77 94       	ror	r7
    2b18:	67 94       	ror	r6
    2b1a:	c6 cf       	rjmp	.-116    	; 0x2aa8 <__mulsf3+0xae>
    2b1c:	6b 89       	ldd	r22, Y+19	; 0x13
    2b1e:	7c 89       	ldd	r23, Y+20	; 0x14
    2b20:	eb 85       	ldd	r30, Y+11	; 0x0b
    2b22:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b24:	6e 0f       	add	r22, r30
    2b26:	7f 1f       	adc	r23, r31
    2b28:	6e 5f       	subi	r22, 0xFE	; 254
    2b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2c:	7c 8f       	std	Y+28, r23	; 0x1c
    2b2e:	6b 8f       	std	Y+27, r22	; 0x1b
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b34:	7a 89       	ldd	r23, Y+18	; 0x12
    2b36:	e7 17       	cp	r30, r23
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <__mulsf3+0x142>
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	6a 8f       	std	Y+26, r22	; 0x1a
    2b3e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2b40:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2b42:	10 c0       	rjmp	.+32     	; 0x2b64 <__mulsf3+0x16a>
    2b44:	fc 01       	movw	r30, r24
    2b46:	e1 70       	andi	r30, 0x01	; 1
    2b48:	f0 70       	andi	r31, 0x00	; 0
    2b4a:	30 97       	sbiw	r30, 0x00	; 0
    2b4c:	29 f0       	breq	.+10     	; 0x2b58 <__mulsf3+0x15e>
    2b4e:	56 95       	lsr	r21
    2b50:	47 95       	ror	r20
    2b52:	37 95       	ror	r19
    2b54:	27 95       	ror	r18
    2b56:	50 68       	ori	r21, 0x80	; 128
    2b58:	b6 95       	lsr	r27
    2b5a:	a7 95       	ror	r26
    2b5c:	97 95       	ror	r25
    2b5e:	87 95       	ror	r24
    2b60:	6f 5f       	subi	r22, 0xFF	; 255
    2b62:	7f 4f       	sbci	r23, 0xFF	; 255
    2b64:	b7 fd       	sbrc	r27, 7
    2b66:	ee cf       	rjmp	.-36     	; 0x2b44 <__mulsf3+0x14a>
    2b68:	0c c0       	rjmp	.+24     	; 0x2b82 <__mulsf3+0x188>
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	aa 1f       	adc	r26, r26
    2b70:	bb 1f       	adc	r27, r27
    2b72:	57 fd       	sbrc	r21, 7
    2b74:	81 60       	ori	r24, 0x01	; 1
    2b76:	22 0f       	add	r18, r18
    2b78:	33 1f       	adc	r19, r19
    2b7a:	44 1f       	adc	r20, r20
    2b7c:	55 1f       	adc	r21, r21
    2b7e:	61 50       	subi	r22, 0x01	; 1
    2b80:	70 40       	sbci	r23, 0x00	; 0
    2b82:	80 30       	cpi	r24, 0x00	; 0
    2b84:	e0 e0       	ldi	r30, 0x00	; 0
    2b86:	9e 07       	cpc	r25, r30
    2b88:	e0 e0       	ldi	r30, 0x00	; 0
    2b8a:	ae 07       	cpc	r26, r30
    2b8c:	e0 e4       	ldi	r30, 0x40	; 64
    2b8e:	be 07       	cpc	r27, r30
    2b90:	60 f3       	brcs	.-40     	; 0x2b6a <__mulsf3+0x170>
    2b92:	6b 8f       	std	Y+27, r22	; 0x1b
    2b94:	7c 8f       	std	Y+28, r23	; 0x1c
    2b96:	6f e7       	ldi	r22, 0x7F	; 127
    2b98:	e6 2e       	mov	r14, r22
    2b9a:	f1 2c       	mov	r15, r1
    2b9c:	01 2d       	mov	r16, r1
    2b9e:	11 2d       	mov	r17, r1
    2ba0:	e8 22       	and	r14, r24
    2ba2:	f9 22       	and	r15, r25
    2ba4:	0a 23       	and	r16, r26
    2ba6:	1b 23       	and	r17, r27
    2ba8:	60 e4       	ldi	r22, 0x40	; 64
    2baa:	e6 16       	cp	r14, r22
    2bac:	f1 04       	cpc	r15, r1
    2bae:	01 05       	cpc	r16, r1
    2bb0:	11 05       	cpc	r17, r1
    2bb2:	61 f4       	brne	.+24     	; 0x2bcc <__mulsf3+0x1d2>
    2bb4:	87 fd       	sbrc	r24, 7
    2bb6:	0a c0       	rjmp	.+20     	; 0x2bcc <__mulsf3+0x1d2>
    2bb8:	21 15       	cp	r18, r1
    2bba:	31 05       	cpc	r19, r1
    2bbc:	41 05       	cpc	r20, r1
    2bbe:	51 05       	cpc	r21, r1
    2bc0:	29 f0       	breq	.+10     	; 0x2bcc <__mulsf3+0x1d2>
    2bc2:	80 5c       	subi	r24, 0xC0	; 192
    2bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc6:	af 4f       	sbci	r26, 0xFF	; 255
    2bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bca:	80 78       	andi	r24, 0x80	; 128
    2bcc:	8d 8f       	std	Y+29, r24	; 0x1d
    2bce:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd0:	af 8f       	std	Y+31, r26	; 0x1f
    2bd2:	b8 a3       	std	Y+32, r27	; 0x20
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	89 8f       	std	Y+25, r24	; 0x19
    2bd8:	ce 01       	movw	r24, r28
    2bda:	49 96       	adiw	r24, 0x19	; 25
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <__mulsf3+0x1e8>
    2bde:	84 e1       	ldi	r24, 0x14	; 20
    2be0:	91 e0       	ldi	r25, 0x01	; 1
    2be2:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__pack_f>
    2be6:	a0 96       	adiw	r28, 0x20	; 32
    2be8:	e2 e1       	ldi	r30, 0x12	; 18
    2bea:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__>

00002bee <__gtsf2>:
    2bee:	a8 e1       	ldi	r26, 0x18	; 24
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	ed ef       	ldi	r30, 0xFD	; 253
    2bf4:	f5 e1       	ldi	r31, 0x15	; 21
    2bf6:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__prologue_saves__+0x18>
    2bfa:	69 83       	std	Y+1, r22	; 0x01
    2bfc:	7a 83       	std	Y+2, r23	; 0x02
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	2d 83       	std	Y+5, r18	; 0x05
    2c04:	3e 83       	std	Y+6, r19	; 0x06
    2c06:	4f 83       	std	Y+7, r20	; 0x07
    2c08:	58 87       	std	Y+8, r21	; 0x08
    2c0a:	8e 01       	movw	r16, r28
    2c0c:	07 5f       	subi	r16, 0xF7	; 247
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	b8 01       	movw	r22, r16
    2c16:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2c1a:	81 e1       	ldi	r24, 0x11	; 17
    2c1c:	e8 2e       	mov	r14, r24
    2c1e:	f1 2c       	mov	r15, r1
    2c20:	ec 0e       	add	r14, r28
    2c22:	fd 1e       	adc	r15, r29
    2c24:	ce 01       	movw	r24, r28
    2c26:	05 96       	adiw	r24, 0x05	; 5
    2c28:	b7 01       	movw	r22, r14
    2c2a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	82 30       	cpi	r24, 0x02	; 2
    2c32:	40 f0       	brcs	.+16     	; 0x2c44 <__gtsf2+0x56>
    2c34:	89 89       	ldd	r24, Y+17	; 0x11
    2c36:	82 30       	cpi	r24, 0x02	; 2
    2c38:	28 f0       	brcs	.+10     	; 0x2c44 <__gtsf2+0x56>
    2c3a:	c8 01       	movw	r24, r16
    2c3c:	b7 01       	movw	r22, r14
    2c3e:	0e 94 10 18 	call	0x3020	; 0x3020 <__fpcmp_parts_f>
    2c42:	01 c0       	rjmp	.+2      	; 0x2c46 <__gtsf2+0x58>
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	68 96       	adiw	r28, 0x18	; 24
    2c48:	e6 e0       	ldi	r30, 0x06	; 6
    2c4a:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__epilogue_restores__+0x18>

00002c4e <__gesf2>:
    2c4e:	a8 e1       	ldi	r26, 0x18	; 24
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	ed e2       	ldi	r30, 0x2D	; 45
    2c54:	f6 e1       	ldi	r31, 0x16	; 22
    2c56:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__prologue_saves__+0x18>
    2c5a:	69 83       	std	Y+1, r22	; 0x01
    2c5c:	7a 83       	std	Y+2, r23	; 0x02
    2c5e:	8b 83       	std	Y+3, r24	; 0x03
    2c60:	9c 83       	std	Y+4, r25	; 0x04
    2c62:	2d 83       	std	Y+5, r18	; 0x05
    2c64:	3e 83       	std	Y+6, r19	; 0x06
    2c66:	4f 83       	std	Y+7, r20	; 0x07
    2c68:	58 87       	std	Y+8, r21	; 0x08
    2c6a:	8e 01       	movw	r16, r28
    2c6c:	07 5f       	subi	r16, 0xF7	; 247
    2c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c70:	ce 01       	movw	r24, r28
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	b8 01       	movw	r22, r16
    2c76:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2c7a:	81 e1       	ldi	r24, 0x11	; 17
    2c7c:	e8 2e       	mov	r14, r24
    2c7e:	f1 2c       	mov	r15, r1
    2c80:	ec 0e       	add	r14, r28
    2c82:	fd 1e       	adc	r15, r29
    2c84:	ce 01       	movw	r24, r28
    2c86:	05 96       	adiw	r24, 0x05	; 5
    2c88:	b7 01       	movw	r22, r14
    2c8a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	82 30       	cpi	r24, 0x02	; 2
    2c92:	40 f0       	brcs	.+16     	; 0x2ca4 <__gesf2+0x56>
    2c94:	89 89       	ldd	r24, Y+17	; 0x11
    2c96:	82 30       	cpi	r24, 0x02	; 2
    2c98:	28 f0       	brcs	.+10     	; 0x2ca4 <__gesf2+0x56>
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	b7 01       	movw	r22, r14
    2c9e:	0e 94 10 18 	call	0x3020	; 0x3020 <__fpcmp_parts_f>
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <__gesf2+0x58>
    2ca4:	8f ef       	ldi	r24, 0xFF	; 255
    2ca6:	68 96       	adiw	r28, 0x18	; 24
    2ca8:	e6 e0       	ldi	r30, 0x06	; 6
    2caa:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__epilogue_restores__+0x18>

00002cae <__ltsf2>:
    2cae:	a8 e1       	ldi	r26, 0x18	; 24
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	ed e5       	ldi	r30, 0x5D	; 93
    2cb4:	f6 e1       	ldi	r31, 0x16	; 22
    2cb6:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__prologue_saves__+0x18>
    2cba:	69 83       	std	Y+1, r22	; 0x01
    2cbc:	7a 83       	std	Y+2, r23	; 0x02
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
    2cc0:	9c 83       	std	Y+4, r25	; 0x04
    2cc2:	2d 83       	std	Y+5, r18	; 0x05
    2cc4:	3e 83       	std	Y+6, r19	; 0x06
    2cc6:	4f 83       	std	Y+7, r20	; 0x07
    2cc8:	58 87       	std	Y+8, r21	; 0x08
    2cca:	8e 01       	movw	r16, r28
    2ccc:	07 5f       	subi	r16, 0xF7	; 247
    2cce:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	b8 01       	movw	r22, r16
    2cd6:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2cda:	81 e1       	ldi	r24, 0x11	; 17
    2cdc:	e8 2e       	mov	r14, r24
    2cde:	f1 2c       	mov	r15, r1
    2ce0:	ec 0e       	add	r14, r28
    2ce2:	fd 1e       	adc	r15, r29
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	05 96       	adiw	r24, 0x05	; 5
    2ce8:	b7 01       	movw	r22, r14
    2cea:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	82 30       	cpi	r24, 0x02	; 2
    2cf2:	40 f0       	brcs	.+16     	; 0x2d04 <__ltsf2+0x56>
    2cf4:	89 89       	ldd	r24, Y+17	; 0x11
    2cf6:	82 30       	cpi	r24, 0x02	; 2
    2cf8:	28 f0       	brcs	.+10     	; 0x2d04 <__ltsf2+0x56>
    2cfa:	c8 01       	movw	r24, r16
    2cfc:	b7 01       	movw	r22, r14
    2cfe:	0e 94 10 18 	call	0x3020	; 0x3020 <__fpcmp_parts_f>
    2d02:	01 c0       	rjmp	.+2      	; 0x2d06 <__ltsf2+0x58>
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	68 96       	adiw	r28, 0x18	; 24
    2d08:	e6 e0       	ldi	r30, 0x06	; 6
    2d0a:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__epilogue_restores__+0x18>

00002d0e <__fixsfsi>:
    2d0e:	ac e0       	ldi	r26, 0x0C	; 12
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ed e8       	ldi	r30, 0x8D	; 141
    2d14:	f6 e1       	ldi	r31, 0x16	; 22
    2d16:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__prologue_saves__+0x20>
    2d1a:	69 83       	std	Y+1, r22	; 0x01
    2d1c:	7a 83       	std	Y+2, r23	; 0x02
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	ce 01       	movw	r24, r28
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	be 01       	movw	r22, r28
    2d28:	6b 5f       	subi	r22, 0xFB	; 251
    2d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__unpack_f>
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	81 f1       	breq	.+96     	; 0x2d96 <__fixsfsi+0x88>
    2d36:	82 30       	cpi	r24, 0x02	; 2
    2d38:	70 f1       	brcs	.+92     	; 0x2d96 <__fixsfsi+0x88>
    2d3a:	84 30       	cpi	r24, 0x04	; 4
    2d3c:	21 f4       	brne	.+8      	; 0x2d46 <__fixsfsi+0x38>
    2d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d40:	88 23       	and	r24, r24
    2d42:	69 f1       	breq	.+90     	; 0x2d9e <__fixsfsi+0x90>
    2d44:	0a c0       	rjmp	.+20     	; 0x2d5a <__fixsfsi+0x4c>
    2d46:	2f 81       	ldd	r18, Y+7	; 0x07
    2d48:	38 85       	ldd	r19, Y+8	; 0x08
    2d4a:	37 fd       	sbrc	r19, 7
    2d4c:	24 c0       	rjmp	.+72     	; 0x2d96 <__fixsfsi+0x88>
    2d4e:	6e 81       	ldd	r22, Y+6	; 0x06
    2d50:	2f 31       	cpi	r18, 0x1F	; 31
    2d52:	31 05       	cpc	r19, r1
    2d54:	3c f0       	brlt	.+14     	; 0x2d64 <__fixsfsi+0x56>
    2d56:	66 23       	and	r22, r22
    2d58:	11 f1       	breq	.+68     	; 0x2d9e <__fixsfsi+0x90>
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	50 e8       	ldi	r21, 0x80	; 128
    2d62:	21 c0       	rjmp	.+66     	; 0x2da6 <__fixsfsi+0x98>
    2d64:	8e e1       	ldi	r24, 0x1E	; 30
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	82 1b       	sub	r24, r18
    2d6a:	93 0b       	sbc	r25, r19
    2d6c:	29 85       	ldd	r18, Y+9	; 0x09
    2d6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d70:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d72:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <__fixsfsi+0x70>
    2d76:	56 95       	lsr	r21
    2d78:	47 95       	ror	r20
    2d7a:	37 95       	ror	r19
    2d7c:	27 95       	ror	r18
    2d7e:	8a 95       	dec	r24
    2d80:	d2 f7       	brpl	.-12     	; 0x2d76 <__fixsfsi+0x68>
    2d82:	66 23       	and	r22, r22
    2d84:	81 f0       	breq	.+32     	; 0x2da6 <__fixsfsi+0x98>
    2d86:	50 95       	com	r21
    2d88:	40 95       	com	r20
    2d8a:	30 95       	com	r19
    2d8c:	21 95       	neg	r18
    2d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d90:	4f 4f       	sbci	r20, 0xFF	; 255
    2d92:	5f 4f       	sbci	r21, 0xFF	; 255
    2d94:	08 c0       	rjmp	.+16     	; 0x2da6 <__fixsfsi+0x98>
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	a9 01       	movw	r20, r18
    2d9c:	04 c0       	rjmp	.+8      	; 0x2da6 <__fixsfsi+0x98>
    2d9e:	2f ef       	ldi	r18, 0xFF	; 255
    2da0:	3f ef       	ldi	r19, 0xFF	; 255
    2da2:	4f ef       	ldi	r20, 0xFF	; 255
    2da4:	5f e7       	ldi	r21, 0x7F	; 127
    2da6:	b9 01       	movw	r22, r18
    2da8:	ca 01       	movw	r24, r20
    2daa:	2c 96       	adiw	r28, 0x0c	; 12
    2dac:	e2 e0       	ldi	r30, 0x02	; 2
    2dae:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__epilogue_restores__+0x20>

00002db2 <__pack_f>:
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	24 81       	ldd	r18, Z+4	; 0x04
    2dc2:	35 81       	ldd	r19, Z+5	; 0x05
    2dc4:	46 81       	ldd	r20, Z+6	; 0x06
    2dc6:	57 81       	ldd	r21, Z+7	; 0x07
    2dc8:	61 81       	ldd	r22, Z+1	; 0x01
    2dca:	80 81       	ld	r24, Z
    2dcc:	82 30       	cpi	r24, 0x02	; 2
    2dce:	20 f4       	brcc	.+8      	; 0x2dd8 <__pack_f+0x26>
    2dd0:	40 61       	ori	r20, 0x10	; 16
    2dd2:	ef ef       	ldi	r30, 0xFF	; 255
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	a3 c0       	rjmp	.+326    	; 0x2f1e <__pack_f+0x16c>
    2dd8:	84 30       	cpi	r24, 0x04	; 4
    2dda:	09 f4       	brne	.+2      	; 0x2dde <__pack_f+0x2c>
    2ddc:	9b c0       	rjmp	.+310    	; 0x2f14 <__pack_f+0x162>
    2dde:	82 30       	cpi	r24, 0x02	; 2
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <__pack_f+0x32>
    2de2:	92 c0       	rjmp	.+292    	; 0x2f08 <__pack_f+0x156>
    2de4:	21 15       	cp	r18, r1
    2de6:	31 05       	cpc	r19, r1
    2de8:	41 05       	cpc	r20, r1
    2dea:	51 05       	cpc	r21, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <__pack_f+0x3e>
    2dee:	8f c0       	rjmp	.+286    	; 0x2f0e <__pack_f+0x15c>
    2df0:	02 80       	ldd	r0, Z+2	; 0x02
    2df2:	f3 81       	ldd	r31, Z+3	; 0x03
    2df4:	e0 2d       	mov	r30, r0
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	e2 38       	cpi	r30, 0x82	; 130
    2dfa:	f8 07       	cpc	r31, r24
    2dfc:	0c f0       	brlt	.+2      	; 0x2e00 <__pack_f+0x4e>
    2dfe:	5a c0       	rjmp	.+180    	; 0x2eb4 <__pack_f+0x102>
    2e00:	c2 e8       	ldi	r28, 0x82	; 130
    2e02:	df ef       	ldi	r29, 0xFF	; 255
    2e04:	ce 1b       	sub	r28, r30
    2e06:	df 0b       	sbc	r29, r31
    2e08:	ca 31       	cpi	r28, 0x1A	; 26
    2e0a:	d1 05       	cpc	r29, r1
    2e0c:	6c f5       	brge	.+90     	; 0x2e68 <__pack_f+0xb6>
    2e0e:	79 01       	movw	r14, r18
    2e10:	8a 01       	movw	r16, r20
    2e12:	0c 2e       	mov	r0, r28
    2e14:	04 c0       	rjmp	.+8      	; 0x2e1e <__pack_f+0x6c>
    2e16:	16 95       	lsr	r17
    2e18:	07 95       	ror	r16
    2e1a:	f7 94       	ror	r15
    2e1c:	e7 94       	ror	r14
    2e1e:	0a 94       	dec	r0
    2e20:	d2 f7       	brpl	.-12     	; 0x2e16 <__pack_f+0x64>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	a0 e0       	ldi	r26, 0x00	; 0
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	0c 2e       	mov	r0, r28
    2e2c:	04 c0       	rjmp	.+8      	; 0x2e36 <__pack_f+0x84>
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	aa 1f       	adc	r26, r26
    2e34:	bb 1f       	adc	r27, r27
    2e36:	0a 94       	dec	r0
    2e38:	d2 f7       	brpl	.-12     	; 0x2e2e <__pack_f+0x7c>
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	a1 09       	sbc	r26, r1
    2e3e:	b1 09       	sbc	r27, r1
    2e40:	82 23       	and	r24, r18
    2e42:	93 23       	and	r25, r19
    2e44:	a4 23       	and	r26, r20
    2e46:	b5 23       	and	r27, r21
    2e48:	21 e0       	ldi	r18, 0x01	; 1
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	a1 05       	cpc	r26, r1
    2e54:	b1 05       	cpc	r27, r1
    2e56:	19 f4       	brne	.+6      	; 0x2e5e <__pack_f+0xac>
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	a9 01       	movw	r20, r18
    2e5e:	2e 29       	or	r18, r14
    2e60:	3f 29       	or	r19, r15
    2e62:	40 2b       	or	r20, r16
    2e64:	51 2b       	or	r21, r17
    2e66:	03 c0       	rjmp	.+6      	; 0x2e6e <__pack_f+0xbc>
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	a9 01       	movw	r20, r18
    2e6e:	da 01       	movw	r26, r20
    2e70:	c9 01       	movw	r24, r18
    2e72:	8f 77       	andi	r24, 0x7F	; 127
    2e74:	90 70       	andi	r25, 0x00	; 0
    2e76:	a0 70       	andi	r26, 0x00	; 0
    2e78:	b0 70       	andi	r27, 0x00	; 0
    2e7a:	80 34       	cpi	r24, 0x40	; 64
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	a1 05       	cpc	r26, r1
    2e80:	b1 05       	cpc	r27, r1
    2e82:	39 f4       	brne	.+14     	; 0x2e92 <__pack_f+0xe0>
    2e84:	27 ff       	sbrs	r18, 7
    2e86:	09 c0       	rjmp	.+18     	; 0x2e9a <__pack_f+0xe8>
    2e88:	20 5c       	subi	r18, 0xC0	; 192
    2e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e90:	04 c0       	rjmp	.+8      	; 0x2e9a <__pack_f+0xe8>
    2e92:	21 5c       	subi	r18, 0xC1	; 193
    2e94:	3f 4f       	sbci	r19, 0xFF	; 255
    2e96:	4f 4f       	sbci	r20, 0xFF	; 255
    2e98:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9a:	e1 e0       	ldi	r30, 0x01	; 1
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	20 30       	cpi	r18, 0x00	; 0
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	38 07       	cpc	r19, r24
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	48 07       	cpc	r20, r24
    2ea8:	80 e4       	ldi	r24, 0x40	; 64
    2eaa:	58 07       	cpc	r21, r24
    2eac:	28 f5       	brcc	.+74     	; 0x2ef8 <__pack_f+0x146>
    2eae:	e0 e0       	ldi	r30, 0x00	; 0
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	22 c0       	rjmp	.+68     	; 0x2ef8 <__pack_f+0x146>
    2eb4:	e0 38       	cpi	r30, 0x80	; 128
    2eb6:	f1 05       	cpc	r31, r1
    2eb8:	6c f5       	brge	.+90     	; 0x2f14 <__pack_f+0x162>
    2eba:	e1 58       	subi	r30, 0x81	; 129
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	da 01       	movw	r26, r20
    2ec0:	c9 01       	movw	r24, r18
    2ec2:	8f 77       	andi	r24, 0x7F	; 127
    2ec4:	90 70       	andi	r25, 0x00	; 0
    2ec6:	a0 70       	andi	r26, 0x00	; 0
    2ec8:	b0 70       	andi	r27, 0x00	; 0
    2eca:	80 34       	cpi	r24, 0x40	; 64
    2ecc:	91 05       	cpc	r25, r1
    2ece:	a1 05       	cpc	r26, r1
    2ed0:	b1 05       	cpc	r27, r1
    2ed2:	39 f4       	brne	.+14     	; 0x2ee2 <__pack_f+0x130>
    2ed4:	27 ff       	sbrs	r18, 7
    2ed6:	09 c0       	rjmp	.+18     	; 0x2eea <__pack_f+0x138>
    2ed8:	20 5c       	subi	r18, 0xC0	; 192
    2eda:	3f 4f       	sbci	r19, 0xFF	; 255
    2edc:	4f 4f       	sbci	r20, 0xFF	; 255
    2ede:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee0:	04 c0       	rjmp	.+8      	; 0x2eea <__pack_f+0x138>
    2ee2:	21 5c       	subi	r18, 0xC1	; 193
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eea:	57 ff       	sbrs	r21, 7
    2eec:	05 c0       	rjmp	.+10     	; 0x2ef8 <__pack_f+0x146>
    2eee:	56 95       	lsr	r21
    2ef0:	47 95       	ror	r20
    2ef2:	37 95       	ror	r19
    2ef4:	27 95       	ror	r18
    2ef6:	31 96       	adiw	r30, 0x01	; 1
    2ef8:	87 e0       	ldi	r24, 0x07	; 7
    2efa:	56 95       	lsr	r21
    2efc:	47 95       	ror	r20
    2efe:	37 95       	ror	r19
    2f00:	27 95       	ror	r18
    2f02:	8a 95       	dec	r24
    2f04:	d1 f7       	brne	.-12     	; 0x2efa <__pack_f+0x148>
    2f06:	0b c0       	rjmp	.+22     	; 0x2f1e <__pack_f+0x16c>
    2f08:	e0 e0       	ldi	r30, 0x00	; 0
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <__pack_f+0x166>
    2f0e:	e0 e0       	ldi	r30, 0x00	; 0
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	05 c0       	rjmp	.+10     	; 0x2f1e <__pack_f+0x16c>
    2f14:	ef ef       	ldi	r30, 0xFF	; 255
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	a9 01       	movw	r20, r18
    2f1e:	8e 2f       	mov	r24, r30
    2f20:	87 95       	ror	r24
    2f22:	88 27       	eor	r24, r24
    2f24:	87 95       	ror	r24
    2f26:	94 2f       	mov	r25, r20
    2f28:	9f 77       	andi	r25, 0x7F	; 127
    2f2a:	67 95       	ror	r22
    2f2c:	66 27       	eor	r22, r22
    2f2e:	67 95       	ror	r22
    2f30:	e6 95       	lsr	r30
    2f32:	e2 2e       	mov	r14, r18
    2f34:	a9 2f       	mov	r26, r25
    2f36:	a8 2b       	or	r26, r24
    2f38:	fe 2f       	mov	r31, r30
    2f3a:	f6 2b       	or	r31, r22
    2f3c:	62 2f       	mov	r22, r18
    2f3e:	73 2f       	mov	r23, r19
    2f40:	8a 2f       	mov	r24, r26
    2f42:	9f 2f       	mov	r25, r31
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	e6 e0       	ldi	r30, 0x06	; 6
    2f4a:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__epilogue_restores__+0x18>

00002f4e <__unpack_f>:
    2f4e:	dc 01       	movw	r26, r24
    2f50:	fb 01       	movw	r30, r22
    2f52:	2c 91       	ld	r18, X
    2f54:	11 96       	adiw	r26, 0x01	; 1
    2f56:	3c 91       	ld	r19, X
    2f58:	11 97       	sbiw	r26, 0x01	; 1
    2f5a:	12 96       	adiw	r26, 0x02	; 2
    2f5c:	8c 91       	ld	r24, X
    2f5e:	12 97       	sbiw	r26, 0x02	; 2
    2f60:	48 2f       	mov	r20, r24
    2f62:	4f 77       	andi	r20, 0x7F	; 127
    2f64:	50 e0       	ldi	r21, 0x00	; 0
    2f66:	98 2f       	mov	r25, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	99 27       	eor	r25, r25
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	13 96       	adiw	r26, 0x03	; 3
    2f70:	6c 91       	ld	r22, X
    2f72:	13 97       	sbiw	r26, 0x03	; 3
    2f74:	86 2f       	mov	r24, r22
    2f76:	88 0f       	add	r24, r24
    2f78:	89 2b       	or	r24, r25
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	66 1f       	adc	r22, r22
    2f7e:	66 27       	eor	r22, r22
    2f80:	66 1f       	adc	r22, r22
    2f82:	61 83       	std	Z+1, r22	; 0x01
    2f84:	00 97       	sbiw	r24, 0x00	; 0
    2f86:	39 f5       	brne	.+78     	; 0x2fd6 <__unpack_f+0x88>
    2f88:	21 15       	cp	r18, r1
    2f8a:	31 05       	cpc	r19, r1
    2f8c:	41 05       	cpc	r20, r1
    2f8e:	51 05       	cpc	r21, r1
    2f90:	11 f4       	brne	.+4      	; 0x2f96 <__unpack_f+0x48>
    2f92:	82 e0       	ldi	r24, 0x02	; 2
    2f94:	29 c0       	rjmp	.+82     	; 0x2fe8 <__unpack_f+0x9a>
    2f96:	82 e8       	ldi	r24, 0x82	; 130
    2f98:	9f ef       	ldi	r25, 0xFF	; 255
    2f9a:	93 83       	std	Z+3, r25	; 0x03
    2f9c:	82 83       	std	Z+2, r24	; 0x02
    2f9e:	67 e0       	ldi	r22, 0x07	; 7
    2fa0:	22 0f       	add	r18, r18
    2fa2:	33 1f       	adc	r19, r19
    2fa4:	44 1f       	adc	r20, r20
    2fa6:	55 1f       	adc	r21, r21
    2fa8:	6a 95       	dec	r22
    2faa:	d1 f7       	brne	.-12     	; 0x2fa0 <__unpack_f+0x52>
    2fac:	83 e0       	ldi	r24, 0x03	; 3
    2fae:	80 83       	st	Z, r24
    2fb0:	09 c0       	rjmp	.+18     	; 0x2fc4 <__unpack_f+0x76>
    2fb2:	22 0f       	add	r18, r18
    2fb4:	33 1f       	adc	r19, r19
    2fb6:	44 1f       	adc	r20, r20
    2fb8:	55 1f       	adc	r21, r21
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	93 83       	std	Z+3, r25	; 0x03
    2fc2:	82 83       	std	Z+2, r24	; 0x02
    2fc4:	20 30       	cpi	r18, 0x00	; 0
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	38 07       	cpc	r19, r24
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	48 07       	cpc	r20, r24
    2fce:	80 e4       	ldi	r24, 0x40	; 64
    2fd0:	58 07       	cpc	r21, r24
    2fd2:	78 f3       	brcs	.-34     	; 0x2fb2 <__unpack_f+0x64>
    2fd4:	20 c0       	rjmp	.+64     	; 0x3016 <__unpack_f+0xc8>
    2fd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fd8:	91 05       	cpc	r25, r1
    2fda:	79 f4       	brne	.+30     	; 0x2ffa <__unpack_f+0xac>
    2fdc:	21 15       	cp	r18, r1
    2fde:	31 05       	cpc	r19, r1
    2fe0:	41 05       	cpc	r20, r1
    2fe2:	51 05       	cpc	r21, r1
    2fe4:	19 f4       	brne	.+6      	; 0x2fec <__unpack_f+0x9e>
    2fe6:	84 e0       	ldi	r24, 0x04	; 4
    2fe8:	80 83       	st	Z, r24
    2fea:	08 95       	ret
    2fec:	44 ff       	sbrs	r20, 4
    2fee:	03 c0       	rjmp	.+6      	; 0x2ff6 <__unpack_f+0xa8>
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	80 83       	st	Z, r24
    2ff4:	10 c0       	rjmp	.+32     	; 0x3016 <__unpack_f+0xc8>
    2ff6:	10 82       	st	Z, r1
    2ff8:	0e c0       	rjmp	.+28     	; 0x3016 <__unpack_f+0xc8>
    2ffa:	8f 57       	subi	r24, 0x7F	; 127
    2ffc:	90 40       	sbci	r25, 0x00	; 0
    2ffe:	93 83       	std	Z+3, r25	; 0x03
    3000:	82 83       	std	Z+2, r24	; 0x02
    3002:	83 e0       	ldi	r24, 0x03	; 3
    3004:	80 83       	st	Z, r24
    3006:	87 e0       	ldi	r24, 0x07	; 7
    3008:	22 0f       	add	r18, r18
    300a:	33 1f       	adc	r19, r19
    300c:	44 1f       	adc	r20, r20
    300e:	55 1f       	adc	r21, r21
    3010:	8a 95       	dec	r24
    3012:	d1 f7       	brne	.-12     	; 0x3008 <__unpack_f+0xba>
    3014:	50 64       	ori	r21, 0x40	; 64
    3016:	24 83       	std	Z+4, r18	; 0x04
    3018:	35 83       	std	Z+5, r19	; 0x05
    301a:	46 83       	std	Z+6, r20	; 0x06
    301c:	57 83       	std	Z+7, r21	; 0x07
    301e:	08 95       	ret

00003020 <__fpcmp_parts_f>:
    3020:	fc 01       	movw	r30, r24
    3022:	db 01       	movw	r26, r22
    3024:	90 81       	ld	r25, Z
    3026:	92 30       	cpi	r25, 0x02	; 2
    3028:	08 f4       	brcc	.+2      	; 0x302c <__fpcmp_parts_f+0xc>
    302a:	49 c0       	rjmp	.+146    	; 0x30be <__fpcmp_parts_f+0x9e>
    302c:	8c 91       	ld	r24, X
    302e:	82 30       	cpi	r24, 0x02	; 2
    3030:	08 f4       	brcc	.+2      	; 0x3034 <__fpcmp_parts_f+0x14>
    3032:	45 c0       	rjmp	.+138    	; 0x30be <__fpcmp_parts_f+0x9e>
    3034:	94 30       	cpi	r25, 0x04	; 4
    3036:	51 f4       	brne	.+20     	; 0x304c <__fpcmp_parts_f+0x2c>
    3038:	61 81       	ldd	r22, Z+1	; 0x01
    303a:	84 30       	cpi	r24, 0x04	; 4
    303c:	b1 f5       	brne	.+108    	; 0x30aa <__fpcmp_parts_f+0x8a>
    303e:	11 96       	adiw	r26, 0x01	; 1
    3040:	2c 91       	ld	r18, X
    3042:	11 97       	sbiw	r26, 0x01	; 1
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	26 1b       	sub	r18, r22
    3048:	31 09       	sbc	r19, r1
    304a:	41 c0       	rjmp	.+130    	; 0x30ce <__fpcmp_parts_f+0xae>
    304c:	84 30       	cpi	r24, 0x04	; 4
    304e:	21 f0       	breq	.+8      	; 0x3058 <__fpcmp_parts_f+0x38>
    3050:	92 30       	cpi	r25, 0x02	; 2
    3052:	41 f4       	brne	.+16     	; 0x3064 <__fpcmp_parts_f+0x44>
    3054:	82 30       	cpi	r24, 0x02	; 2
    3056:	b1 f1       	breq	.+108    	; 0x30c4 <__fpcmp_parts_f+0xa4>
    3058:	11 96       	adiw	r26, 0x01	; 1
    305a:	8c 91       	ld	r24, X
    305c:	11 97       	sbiw	r26, 0x01	; 1
    305e:	88 23       	and	r24, r24
    3060:	a1 f1       	breq	.+104    	; 0x30ca <__fpcmp_parts_f+0xaa>
    3062:	2d c0       	rjmp	.+90     	; 0x30be <__fpcmp_parts_f+0x9e>
    3064:	61 81       	ldd	r22, Z+1	; 0x01
    3066:	82 30       	cpi	r24, 0x02	; 2
    3068:	01 f1       	breq	.+64     	; 0x30aa <__fpcmp_parts_f+0x8a>
    306a:	11 96       	adiw	r26, 0x01	; 1
    306c:	8c 91       	ld	r24, X
    306e:	11 97       	sbiw	r26, 0x01	; 1
    3070:	68 17       	cp	r22, r24
    3072:	d9 f4       	brne	.+54     	; 0x30aa <__fpcmp_parts_f+0x8a>
    3074:	22 81       	ldd	r18, Z+2	; 0x02
    3076:	33 81       	ldd	r19, Z+3	; 0x03
    3078:	12 96       	adiw	r26, 0x02	; 2
    307a:	8d 91       	ld	r24, X+
    307c:	9c 91       	ld	r25, X
    307e:	13 97       	sbiw	r26, 0x03	; 3
    3080:	82 17       	cp	r24, r18
    3082:	93 07       	cpc	r25, r19
    3084:	94 f0       	brlt	.+36     	; 0x30aa <__fpcmp_parts_f+0x8a>
    3086:	28 17       	cp	r18, r24
    3088:	39 07       	cpc	r19, r25
    308a:	bc f0       	brlt	.+46     	; 0x30ba <__fpcmp_parts_f+0x9a>
    308c:	24 81       	ldd	r18, Z+4	; 0x04
    308e:	35 81       	ldd	r19, Z+5	; 0x05
    3090:	46 81       	ldd	r20, Z+6	; 0x06
    3092:	57 81       	ldd	r21, Z+7	; 0x07
    3094:	14 96       	adiw	r26, 0x04	; 4
    3096:	8d 91       	ld	r24, X+
    3098:	9d 91       	ld	r25, X+
    309a:	0d 90       	ld	r0, X+
    309c:	bc 91       	ld	r27, X
    309e:	a0 2d       	mov	r26, r0
    30a0:	82 17       	cp	r24, r18
    30a2:	93 07       	cpc	r25, r19
    30a4:	a4 07       	cpc	r26, r20
    30a6:	b5 07       	cpc	r27, r21
    30a8:	18 f4       	brcc	.+6      	; 0x30b0 <__fpcmp_parts_f+0x90>
    30aa:	66 23       	and	r22, r22
    30ac:	41 f0       	breq	.+16     	; 0x30be <__fpcmp_parts_f+0x9e>
    30ae:	0d c0       	rjmp	.+26     	; 0x30ca <__fpcmp_parts_f+0xaa>
    30b0:	28 17       	cp	r18, r24
    30b2:	39 07       	cpc	r19, r25
    30b4:	4a 07       	cpc	r20, r26
    30b6:	5b 07       	cpc	r21, r27
    30b8:	28 f4       	brcc	.+10     	; 0x30c4 <__fpcmp_parts_f+0xa4>
    30ba:	66 23       	and	r22, r22
    30bc:	31 f0       	breq	.+12     	; 0x30ca <__fpcmp_parts_f+0xaa>
    30be:	21 e0       	ldi	r18, 0x01	; 1
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <__fpcmp_parts_f+0xae>
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <__fpcmp_parts_f+0xae>
    30ca:	2f ef       	ldi	r18, 0xFF	; 255
    30cc:	3f ef       	ldi	r19, 0xFF	; 255
    30ce:	c9 01       	movw	r24, r18
    30d0:	08 95       	ret

000030d2 <__udivmodhi4>:
    30d2:	aa 1b       	sub	r26, r26
    30d4:	bb 1b       	sub	r27, r27
    30d6:	51 e1       	ldi	r21, 0x11	; 17
    30d8:	07 c0       	rjmp	.+14     	; 0x30e8 <__udivmodhi4_ep>

000030da <__udivmodhi4_loop>:
    30da:	aa 1f       	adc	r26, r26
    30dc:	bb 1f       	adc	r27, r27
    30de:	a6 17       	cp	r26, r22
    30e0:	b7 07       	cpc	r27, r23
    30e2:	10 f0       	brcs	.+4      	; 0x30e8 <__udivmodhi4_ep>
    30e4:	a6 1b       	sub	r26, r22
    30e6:	b7 0b       	sbc	r27, r23

000030e8 <__udivmodhi4_ep>:
    30e8:	88 1f       	adc	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	5a 95       	dec	r21
    30ee:	a9 f7       	brne	.-22     	; 0x30da <__udivmodhi4_loop>
    30f0:	80 95       	com	r24
    30f2:	90 95       	com	r25
    30f4:	bc 01       	movw	r22, r24
    30f6:	cd 01       	movw	r24, r26
    30f8:	08 95       	ret

000030fa <__divmodhi4>:
    30fa:	97 fb       	bst	r25, 7
    30fc:	09 2e       	mov	r0, r25
    30fe:	07 26       	eor	r0, r23
    3100:	0a d0       	rcall	.+20     	; 0x3116 <__divmodhi4_neg1>
    3102:	77 fd       	sbrc	r23, 7
    3104:	04 d0       	rcall	.+8      	; 0x310e <__divmodhi4_neg2>
    3106:	e5 df       	rcall	.-54     	; 0x30d2 <__udivmodhi4>
    3108:	06 d0       	rcall	.+12     	; 0x3116 <__divmodhi4_neg1>
    310a:	00 20       	and	r0, r0
    310c:	1a f4       	brpl	.+6      	; 0x3114 <__divmodhi4_exit>

0000310e <__divmodhi4_neg2>:
    310e:	70 95       	com	r23
    3110:	61 95       	neg	r22
    3112:	7f 4f       	sbci	r23, 0xFF	; 255

00003114 <__divmodhi4_exit>:
    3114:	08 95       	ret

00003116 <__divmodhi4_neg1>:
    3116:	f6 f7       	brtc	.-4      	; 0x3114 <__divmodhi4_exit>
    3118:	90 95       	com	r25
    311a:	81 95       	neg	r24
    311c:	9f 4f       	sbci	r25, 0xFF	; 255
    311e:	08 95       	ret

00003120 <__prologue_saves__>:
    3120:	2f 92       	push	r2
    3122:	3f 92       	push	r3
    3124:	4f 92       	push	r4
    3126:	5f 92       	push	r5
    3128:	6f 92       	push	r6
    312a:	7f 92       	push	r7
    312c:	8f 92       	push	r8
    312e:	9f 92       	push	r9
    3130:	af 92       	push	r10
    3132:	bf 92       	push	r11
    3134:	cf 92       	push	r12
    3136:	df 92       	push	r13
    3138:	ef 92       	push	r14
    313a:	ff 92       	push	r15
    313c:	0f 93       	push	r16
    313e:	1f 93       	push	r17
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	ca 1b       	sub	r28, r26
    314a:	db 0b       	sbc	r29, r27
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	09 94       	ijmp

00003158 <__epilogue_restores__>:
    3158:	2a 88       	ldd	r2, Y+18	; 0x12
    315a:	39 88       	ldd	r3, Y+17	; 0x11
    315c:	48 88       	ldd	r4, Y+16	; 0x10
    315e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3160:	6e 84       	ldd	r6, Y+14	; 0x0e
    3162:	7d 84       	ldd	r7, Y+13	; 0x0d
    3164:	8c 84       	ldd	r8, Y+12	; 0x0c
    3166:	9b 84       	ldd	r9, Y+11	; 0x0b
    3168:	aa 84       	ldd	r10, Y+10	; 0x0a
    316a:	b9 84       	ldd	r11, Y+9	; 0x09
    316c:	c8 84       	ldd	r12, Y+8	; 0x08
    316e:	df 80       	ldd	r13, Y+7	; 0x07
    3170:	ee 80       	ldd	r14, Y+6	; 0x06
    3172:	fd 80       	ldd	r15, Y+5	; 0x05
    3174:	0c 81       	ldd	r16, Y+4	; 0x04
    3176:	1b 81       	ldd	r17, Y+3	; 0x03
    3178:	aa 81       	ldd	r26, Y+2	; 0x02
    317a:	b9 81       	ldd	r27, Y+1	; 0x01
    317c:	ce 0f       	add	r28, r30
    317e:	d1 1d       	adc	r29, r1
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	de bf       	out	0x3e, r29	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	cd bf       	out	0x3d, r28	; 61
    318a:	ed 01       	movw	r28, r26
    318c:	08 95       	ret

0000318e <itoa>:
    318e:	fb 01       	movw	r30, r22
    3190:	9f 01       	movw	r18, r30
    3192:	e8 94       	clt
    3194:	42 30       	cpi	r20, 0x02	; 2
    3196:	c4 f0       	brlt	.+48     	; 0x31c8 <itoa+0x3a>
    3198:	45 32       	cpi	r20, 0x25	; 37
    319a:	b4 f4       	brge	.+44     	; 0x31c8 <itoa+0x3a>
    319c:	4a 30       	cpi	r20, 0x0A	; 10
    319e:	29 f4       	brne	.+10     	; 0x31aa <itoa+0x1c>
    31a0:	97 fb       	bst	r25, 7
    31a2:	1e f4       	brtc	.+6      	; 0x31aa <itoa+0x1c>
    31a4:	90 95       	com	r25
    31a6:	81 95       	neg	r24
    31a8:	9f 4f       	sbci	r25, 0xFF	; 255
    31aa:	64 2f       	mov	r22, r20
    31ac:	77 27       	eor	r23, r23
    31ae:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__udivmodhi4>
    31b2:	80 5d       	subi	r24, 0xD0	; 208
    31b4:	8a 33       	cpi	r24, 0x3A	; 58
    31b6:	0c f0       	brlt	.+2      	; 0x31ba <itoa+0x2c>
    31b8:	89 5d       	subi	r24, 0xD9	; 217
    31ba:	81 93       	st	Z+, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	a1 f7       	brne	.-24     	; 0x31aa <itoa+0x1c>
    31c2:	16 f4       	brtc	.+4      	; 0x31c8 <itoa+0x3a>
    31c4:	5d e2       	ldi	r21, 0x2D	; 45
    31c6:	51 93       	st	Z+, r21
    31c8:	10 82       	st	Z, r1
    31ca:	c9 01       	movw	r24, r18
    31cc:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <strrev>

000031d0 <strrev>:
    31d0:	dc 01       	movw	r26, r24
    31d2:	fc 01       	movw	r30, r24
    31d4:	67 2f       	mov	r22, r23
    31d6:	71 91       	ld	r23, Z+
    31d8:	77 23       	and	r23, r23
    31da:	e1 f7       	brne	.-8      	; 0x31d4 <strrev+0x4>
    31dc:	32 97       	sbiw	r30, 0x02	; 2
    31de:	04 c0       	rjmp	.+8      	; 0x31e8 <strrev+0x18>
    31e0:	7c 91       	ld	r23, X
    31e2:	6d 93       	st	X+, r22
    31e4:	70 83       	st	Z, r23
    31e6:	62 91       	ld	r22, -Z
    31e8:	ae 17       	cp	r26, r30
    31ea:	bf 07       	cpc	r27, r31
    31ec:	c8 f3       	brcs	.-14     	; 0x31e0 <strrev+0x10>
    31ee:	08 95       	ret

000031f0 <_exit>:
    31f0:	f8 94       	cli

000031f2 <__stop_program>:
    31f2:	ff cf       	rjmp	.-2      	; 0x31f2 <__stop_program>
